{"version":3,"sources":["store/tasks/actions.js","store/tasks/actionTypes.js","store/global/actions.js","store/global/actionTypes.js","containers/CompleteTaskButtonContainer.jsx","utils/constants.js","containers/AppBarContainer/index.jsx","components/List.jsx","components/TaskList.jsx","containers/TaskListContainer.jsx","components/MenuList.jsx","env.js","utils/index.js","containers/MenuListContainer/index.jsx","components/Drawer.jsx","components/mask.jsx","containers/SideMenuContainer/index.jsx","components/Checkbox.jsx","components/TaskItemList.jsx","containers/TodoListContainer/index.jsx","components/PinnedTaskList.jsx","components/RecentTaskList.jsx","containers/HomeContainer.jsx","containers/EditingTaskPageContainer.jsx","Layout/Index/index.jsx","store/index.js","store/global/reducer.js","store/tasks/reducer.js","store/reducer.js","store/epics.js","App.jsx","index.js"],"names":["addTaskToTasks","task","type","payload","removeTaskInTasks","changeCurrentTodoTask","$task","changeCurrentTodoTaskById","taskId","addTaskIdToRecentTaskIds","$taskId","removeTaskIdInRecentTaskIds","addTaskIdToPinnedTaskIds","removeTaskIdInPinnedTaskIds","checkTaskItemInTaskItemsByIndex","index","checkTaskItemInTaskItemsByTaskId","toggleTaskItemPropChecked","$taskItem","updateTaskFromEdting","showSideMenu","hideSideMenu","changeCurrentPath","path","sideEffect","arguments","length","undefined","CompleteTaskButton","props","buttonText","buttonColor","$tasksItemsEntity","$tasksItemsRefs","dispatch","history","$unchckedTaskItems","useMemo","filter","getIn","map","get","numOfAllTaskItem","size","numOfCheckedItem","isAllComleted","hasZeroTaskItem","onClickCompleteButton","useCallback","push","concat","taskActions","react_default","a","createElement","Fab","style","flex","backgroundColor","color","transition","variant","aria-label","onClick","defaultProps","List","Map","connect","_ref","$Task","EditingTaskItemButton","StartOneTaskButton","AppBarContainer","onClickMenuButton","onClickEditingTaskItemButton","onClickStartOneTaskButton","onClickHomeButton","AppBar","position","Toolbar","IconButton","edge","Menu_default","react_router","render","AppBarContainer_EditingTaskItemButton","component","CompleteTaskButtonContainer","AppBarContainer_StartOneTaskButton","Home_default","$currentTaskItems","$global","withRouter","ListWrapper","title","children","subsubheader","ListSubheader","id","width","subheader","renderTask","onClickTask","onClickEditTaskButton","onClickRemoveTaskButton","isEditable","CSSTransition","key","timeout","classNames","ListItem","height","button","ListItemText","primary","Fragment","evt","BorderColor_default","DeleteForever_default","TaskList","$tasks","onClickSwitchButton","withStopEvtPropagation","callback","stopPropagation","_len","args","Array","_key","apply","subHeader","display","justifyContent","alignItems","className","Typography","Switch","checked","components_List","Divider","TransitionGroup","console","log","$tasksEntity","$tasksRefs","$taskList","_useState","useState","_useState2","Object","slicedToArray","setIsEditable","toggleIsEditable","globalActions","components_TaskList","MenuList","onCreateTask","newTaskTitle","setNewTaskTitle","onInputCreateTask","target","value","onKeyEnterUp","_evt$keyCode","keyCode","keyUp","taskTitle","TextField","label","onChange","onKeyUp","margin","fullWidth","host","isDev","location","some","hs","includes","uniqueId","curID","date","Date","now","toString","prefix","withStopEventtPropagation","func","normalize","arr","name","result","entity","refs","forEach","oriObj","identityKey","fromJS","items","components_MenuList","Drawer","show","in","appear","mountOnEnter","unmountOnExit","maxWidth","overflowY","overflowX","opacity","zIndex","Mask","role","top","left","onClickSideMenuMask","mask","components_Drawer","containers_TaskListContainer","containers_MenuListContainer","Checkbox","es_checkbox","disabled","TaskItemList","onCreateNewTaskItem","onClickRemoveButton","onClickCheckbox","newTaskItemTitle","setNewTaskItemTitle","onInputNewTaskItem","taksItemTitle","dense","gutterBottom","taskItemId","$item","components_Checkbox","Input","placeholder","TodoListContainer","match","params","$currentTodoTask","useEffect","components_TaskItemList","PinnedTaskList","onClickIconButton","onClickIconButtonWithStopEvtPropagation","Star_default","RecentTaskList","StarBorder_default","HomeContainer","$recentTaskIds","$pinnedTaskIds","$recentTasksWithIsPinnedProp","set","$pinnedTasks","pinOneTask","unpinOneTask","components_PinnedTaskList","components_RecentTaskList","actionTypes","ADD_TASK_ITEM_TO_TASK","REMOVE_TASK_ITEM_IN_TASK","taskReducer","$state","action","$editingTask","$editingTaskItems","$editingTaskItemsEntity","$editingTaskItemsRefs","merge","targetId","delete","EditingTaskPageContainer","$targetTask","_useReducer","useReducer","_useReducer2","$taskDispatch","$newTaskItem","to","Index","store","persistor","flexFlow","containers_AppBarContainer","containers_SideMenuContainer","defaultState","globalReducer","state","_action$type","_action$payload","Error","tasks","recentTaskIds","pinnedTaskIds","currentTodoTask","TasksReducer","tasksEntity","tasksRefs","newTask","todoTask","targetTaskId","updatedrecentTasks","unshift","propPath","setIn","taskItemIndex","targetTaskItemId","reducers","combineReducers","tasksReducer","combineEpics","epicMiddleware","createEpicMiddleware","middlewares","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","persistConfig","transforms","immutableTransform","storage","persistedReducer","persistReducer","run","epics","persistStore","App","es","react_router_dom","integration_react","loading","ReactDOM","React","document","getElementById"],"mappings":"omCAEaA,EAAiB,SAAAC,GAAI,MAAK,CACrCC,KCH+B,oBDI/BC,QAASF,IAGEG,EAAoB,SAAAH,GAAI,MAAK,CACxCC,KCNkC,uBDOlCC,QAASF,IAGEI,EAAwB,SAAAC,GAAK,MAAK,CAC7CJ,KCTsC,2BDUtCC,QAASG,IAGEC,EAA4B,SAAAC,GAAM,MAAK,CAClDN,KCZ4C,iCDa5CC,QAASK,IAGEC,EAA2B,SAAAC,GAAO,MAAK,CAClDR,KCf4C,iCDgB5CC,QAASO,IAGEC,EAA8B,SAAAD,GAAO,MAAK,CACrDR,KClB+C,oCDmB/CC,QAASO,IAGEE,EAA2B,SAAAF,GAAO,MAAK,CAClDR,KCrB4C,iCDsB5CC,QAASO,IAGEG,EAA8B,SAAAH,GAAO,MAAK,CACrDR,KCxB+C,oCDyB/CC,QAASO,IAKEI,EAAkC,SAAAC,GAAK,MAAK,CACvDb,KC3BoD,yCD4BpDC,QAASY,IAGEC,EAAmC,SAAAR,GAAM,MAAK,CACzDN,KC9BsD,2CD+BtDC,QAASK,IAGES,EAA4B,SAAAC,GAAS,MAAK,CACrDhB,KCjCsC,2BDkCtCC,QAASe,IAKEC,EAAuB,SAAAb,GAAK,MAAK,CAC5CJ,KCpCqC,0BDqCrCC,QAASG,IE7DEc,EAAe,iBAAO,CACjClB,KCH4B,mBDMjBmB,EAAe,iBAAO,CACjCnB,KCL4B,mBDQjBoB,EAAoB,SAACC,GAAD,MAA8B,CAC7DrB,KCPiC,sBDQjCC,QAASoB,EACTC,WAH+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoB,eEA/CG,EAAqB,SAACC,GAAU,IA4BhCC,EACAC,EA3BFzB,EACEuB,EADFvB,MAAO0B,EACLH,EADKG,kBAAmBC,EACxBJ,EADwBI,gBAAiBC,EACzCL,EADyCK,SAAUC,EACnDN,EADmDM,QAGjDC,EAAqBC,kBACzB,kBAAMJ,EACHK,OAAO,SAAA9B,GAAM,OAAKwB,EAAkBO,MAAM,CAAC/B,EAAQ,cACnDgC,IAAI,SAAAhC,GAAM,OAAIwB,EAAkBS,IAAIjC,MACvC,CAACwB,EAAmBC,IAEhBS,EAAmBT,EAAgBU,KAEnCC,EAAmBF,EADEN,EAAmBO,KAExCE,EAAgBH,IAAqBE,EACrCE,EAAuC,IAArBJ,EAClBK,EAAwBC,sBAAY,WACpCF,EAEFX,EAAQc,KAAR,SAAAC,OAAsB5C,EAAMmC,IAAI,QACvBI,EAETV,EAAQc,KAAK,KAEbf,EAASiB,EAAYnC,iCAAiCoB,EAAmBG,MAAM,CAAC,IAAK,UAEtF,CAACjC,EAAOwC,EAAiBD,EAAeT,EAAoBD,EAASD,IAexE,OAXIY,GACFhB,EAAa,iCACbC,EChCqB,WDiCZc,GACTf,EAAU,4BAAAoB,OAAWN,EAAX,KAAAM,OAA+BR,EAA/B,KACVX,EC3CuB,YD6CvBD,EAAU,8CAAAoB,OAAcN,EAAd,KAAAM,OAAkCR,EAAlC,KACVX,ECxCwB,WD4CxBqB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAO,CACLC,KAAM,IACNC,gBAAiB3B,EACjB4B,MAAO,OACPC,WAAY,0BAEdC,QAAQ,WACRlB,KAAK,SACLmB,aAAW,MACXC,QAAShB,GAERjB,IAePF,EAAmBoC,aAAe,CAChC/B,gBAAiB,IAAIgC,OACrBjC,kBAAmB,IAAIkC,MACvB5D,MAAO,MAGT,IAMe6D,cANE,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,MAAgB,CAC/BrC,kBAAmBqC,EAAM9B,MAAM,CAAC,kBAAmB,QAAS,WAC5DN,gBAAiBoC,EAAM9B,MAAM,CAAC,kBAAmB,QAAS,SAC1DjC,MAAO+D,EAAM5B,IAAI,qBAKjB,KAFa0B,CAGbvC,GE9EI0C,EAAwB,SAACzC,GAAU,IAC/BkC,EAAYlC,EAAZkC,QACR,OACEX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAEEC,MAAO,CACLC,KAAM,IACNC,gBDvBkB,UCwBlBC,MAAO,QAETI,QAASA,EACTF,QAAQ,WACRlB,KAAK,SACLmB,aAAW,OAEV,6BASDS,EAAqB,SAAC1C,GAAU,IAC5BkC,EAAYlC,EAAZkC,QACR,OACEX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,KAAM,IAAKC,gBD5CA,UC4C6BC,MAAO,QACxDE,QAAQ,WACRlB,KAAK,SACLgB,MAAM,UACNG,aAAW,MACXC,QAASA,GAER,yCASP,SAASS,EAAgB3C,GAAO,IACtBK,EAAsBL,EAAtBK,SAAUC,EAAYN,EAAZM,QACZsC,EAAoBzB,sBAAY,WACpCd,EAASd,MACR,CAACc,IAEEwC,EAA+B1B,sBAAY,WAE/Cb,EAAQc,KAAK,MACZ,CAACd,IAEEwC,EAA4B3B,sBAAY,WAC5Cd,EAASd,MACR,CAACc,IAEE0C,EAAoB5B,sBAAY,WACpCb,EAAQc,KAAK,MACZ,CAACd,IAEJ,OACEiB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACErB,MAAO,CACLE,gBAAiB,QACjBD,KAAM,YAERqB,SAAS,UAET1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAYC,KAAK,QAAQlB,QAASU,GAChCrB,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,OAEFD,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACE5D,KAAK,QACL6D,OAAQ,kBACNhC,EAAAC,EAAAC,cAAC+B,EAAD,CAEEtB,QAASW,OAIftB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAO5D,KAAK,QAAQ+D,UAAWC,IAC/BnC,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAOC,OAAQ,kBAAMhC,EAAAC,EAAAC,cAACkC,EAAD,CAAoBzB,QAASY,QAGpDvB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAYjB,QAASa,EAAmBK,KAAK,OAC3C7B,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,SAcVmB,EAAgBR,aAAe,GAI/B,IAGeG,cAHE,SAAAC,GAAA,MAAkB,CACjCsB,kBADetB,EAAGuB,QACSpD,MAAM,CAAC,eAAgB,aAIlD,KAFa4B,CAGbyB,YAAWpB,kIC7Hb,SAASqB,GAAYhE,GAAO,IAClBiE,EAAoBjE,EAApBiE,MAAOC,EAAalE,EAAbkE,SAETC,EAAyB,KAAVF,EAAe,KAClC1C,EAAAC,EAAAC,cAAC2C,GAAA,EAAD,CAAeX,UAAU,MAAMY,GAAG,yBAC/BJ,GAIL,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACW,GAAA,EAAD,CACET,MAAO,CACL2C,MAAO,QAETb,UAAU,MAEVc,UAAWJ,GAEVD,IAWTF,GAAY7B,aAAe,CACzB8B,MAAO,GACPC,SAAU3C,EAAAC,EAAAC,cAAA,6BAGGuC,UCrBTQ,GAAa,SAAAjC,GAAA,IACjB9D,EADiB8D,EACjB9D,MACAgG,EAFiBlC,EAEjBkC,YACAC,EAHiBnC,EAGjBmC,sBACAC,EAJiBpC,EAIjBoC,wBACAC,EALiBrC,EAKjBqC,WALiB,OAOjBrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAeC,IAAKrG,EAAMmC,IAAI,MAAOmE,QAAS,IAAKC,WAAW,YAC5DzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAUtD,MAAO,CAAEuD,OAAQ,QAAUhD,QAAS,kBAAMuC,EAAYhG,IAAQ0G,QAASP,GAC/ErD,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAcC,QAAS5G,EAAMmC,IAAI,WAChCgE,EACCrD,EAAAC,EAAAC,cAACF,EAAAC,EAAM8D,SAAP,KACE/D,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAYjB,QAAS,SAACqD,GAAD,OAASb,EAAsBa,EAAK9G,KACvD8C,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,OAEFD,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAYjB,QAAS,SAACqD,GAAD,OAASZ,EAAwBY,EAAK9G,KACzD8C,EAAAC,EAAAC,cAACgE,EAAAjE,EAAD,QAGF,QAMV,SAASkE,GAAS1F,GAAO,IAErByE,EAMEzE,EANFyE,YACAC,EAKE1E,EALF0E,sBACAC,EAIE3E,EAJF2E,wBACAgB,EAGE3F,EAHF2F,OACAf,EAEE5E,EAFF4E,WACAgB,EACE5F,EADF4F,oBAGIC,EAAyB1E,sBAC7B,SAAA2E,GAAQ,OAAI,SAACP,GACXA,EAAIQ,kBADwB,QAAAC,EAAApG,UAAAC,OAAToG,EAAS,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAATF,EAASE,EAAA,GAAAvG,UAAAuG,GAE5BL,EAAQM,WAAR,EAAYH,KAEd,IAGII,EACJ9E,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACL2E,QAAS,OACTC,eAAgB,gBAChBC,WAAY,WAGdjF,EAAAC,EAAAC,cAAA,OAAKgF,UAAU,QACblF,EAAAC,EAAAC,cAACiF,EAAA,EAAD,kCAEFnF,EAAAC,EAAAC,cAAA,OAAKgF,UAAU,SACblF,EAAAC,EAAAC,cAACiF,EAAA,EAAD,KACG,eACDnF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAczE,QAAS0D,EAAqBgB,QAAShC,EAAY9C,MAAM,eAM/E,OACEP,EAAAC,EAAAC,cAACoF,GAAD,CAAM5C,MAAOoC,GACX9E,EAAAC,EAAAC,cAACqF,EAAA,EAAD,MACAvF,EAAAC,EAAAC,cAACsF,GAAA,EAAD,CAAiBN,UAAU,mBACxBd,EAAOhF,IAAI,SAAAlC,GAAK,OAAI+F,GAAW,CAC9B/F,QACAmG,aACAH,cACAE,wBAAyBkB,EAAuBlB,GAChDD,sBAAuBmB,EAAuBnB,SAiBxDgB,GAASvD,aAAe,CACtBsC,YAAa,WAEXuC,QAAQC,IAAI,gBAEdtC,wBAAyB,WAEvBqC,QAAQC,IAAI,4BAEdvC,sBAAuB,WAErBsC,QAAQC,IAAI,0BAEdrB,oBAAqB,WAEnBoB,QAAQC,IAAI,wBAEdrC,YAAY,GAICc,UCvDf,IAKe3B,eACbzB,YANe,SAAAC,GAAA,IAAGuB,EAAHvB,EAAGuB,QAAStB,EAAZD,EAAYC,MAAZ,MAAyB,CACxCjD,aAAcuE,EAAQlD,IAAI,gBAC1B+E,OAAQnD,EAAM5B,IAAI,WAMhB,KAFF0B,CAvEF,SAA2BtC,GAAO,IACxB2F,EAA8B3F,EAA9B2F,OAAQtF,EAAsBL,EAAtBK,SAAUC,EAAYN,EAAZM,QACpB4G,EAAevB,EAAO/E,IAAI,UAC1BuG,EAAaxB,EAAO/E,IAAI,QACxBwG,EAAY5G,kBAAQ,kBAAM2G,EAAWxG,IAAI,SAAAhC,GAAM,OAAIuI,EAAatG,IAAIjC,MAAU,CAClFuI,EACAC,IAN8BE,EASIC,oBAAS,GATbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GASzBzC,EATyB2C,EAAA,GASbG,EATaH,EAAA,GAW1BI,EAAmBxG,sBAAY,WAEnCuG,GAAe9C,IACd,CAAC8C,EAAe9C,IAEbF,EAAwBvD,sBAC5B,SAAC1C,GACC4B,EAASuH,EAAcpI,gBACvBc,EAAQc,KAAR,SAAAC,OAAsB5C,EAAMmC,IAAI,SAElC,CAACP,EAAUC,IAGPqE,EAA0BxD,sBAC9B,SAAC1C,GACC4B,EAASiB,EAAY/C,kBAAkBE,IACvC4B,EAASiB,EAAYxC,4BAA4BL,EAAMmC,IAAI,SAE7D,CAACP,IAGGoE,EAActD,sBAClB,SAAC1C,GAEC,IAAImG,EAAJ,CAEA,IAAMjG,EAASF,EAAMmC,IAAI,MACzBP,EAASuH,EAAcpI,gBACvBa,EAASiB,EAAY1C,yBAAyBD,IAC9C2B,EAAQc,KAAR,SAAAC,OAAsB5C,EAAMmC,IAAI,UAElC,CAACP,EAAUC,EAASsE,IAGtB,OACErD,EAAAC,EAAAC,cAACoG,GAAD,CACEnD,sBAAuBA,EACvBC,wBAAyBA,EACzBF,YAAaA,EACbG,WAAYA,EACZgB,oBAAqB+B,EACrBhC,OAAQyB,iBCnDd,SAASU,GAAS9H,GAAO,IACf+H,EAAiB/H,EAAjB+H,aADeV,EAEiBC,mBAAS,IAF1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEhBW,EAFgBT,EAAA,GAEFU,EAFEV,EAAA,GAIjBW,EAAoB/G,sBAAY,SAACoE,GACrC0C,EAAgB1C,EAAI4C,OAAOC,QAC1B,IAEGC,EAAelH,sBACnB,SAACoE,GACC,IADO+C,EAEyB/C,EAAxBgD,QAASC,OAFV,IAAAF,GAEmB,EAFnBA,EAGDG,EAAYlD,EAAI4C,OAAOC,MACJ,IAArBK,EAAU5I,QAHI,KAGY2I,IAC5BT,EAAaU,GACbR,EAAgB,MAGpB,CAACA,EAAiBF,IAEpB,OACExG,EAAAC,EAAAC,cAACoF,GAAD,CAAM5C,MAAM,sBACV1C,EAAAC,EAAAC,cAACqF,EAAA,EAAD,MACAvF,EAAAC,EAAAC,cAACwD,EAAA,EAAD,KACE1D,EAAAC,EAAAC,cAACiH,GAAA,EAAD,CACEC,MAAM,iCACNC,SAAUV,EACVW,QAASR,EACThK,KAAK,OACL+J,MAAOJ,EACPc,OAAO,SACP9G,QAAQ,WACR+G,WAAS,MAWnBjB,GAAS3F,aAAe,CACtB4F,aAAc,WAEZf,QAAQC,IAAI,kBAIDa,ICzDKkB,GDyDLlB,MCnDFmB,IANOD,GAMaE,SAASF,KANd,WAE1B,MADc,CAAC,YAAa,aACfG,KAAK,SAAAC,GAAE,OAAIJ,GAAKK,SAASD,OCH3BE,GAAY,WACvB,IAAIC,GAAS,EACTC,EAAOC,KAAKC,MAAMC,WAKtB,OAJIV,OACFjC,QAAQC,IAAI,8CACZuC,EAAO,eAEF,WAA0C,IAAbI,EAAahK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAE3C,OADA2J,GAAS,EACa,IAAlBK,EAAO/J,OAAc,GAAAwB,OAAUmI,EAAV,KAAAnI,OAAkBkI,GAC3C,GAAAlI,OAAUuI,EAAV,KAAAvI,OAAoBmI,EAApB,KAAAnI,OAA4BkI,IAVP,GAkBlB,SAASM,GAA0BC,GACxC,OAAO,SAACvE,GACNA,EAAIQ,kBADmB,QAAAC,EAAApG,UAAAC,OAAToG,EAAS,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAATF,EAASE,EAAA,GAAAvG,UAAAuG,GAEvB,OAAO2D,EAAI1D,WAAJ,EAAQH,IAUZ,SAAS8D,GAAUC,GAAkC,IAA7BC,EAA6BrK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtB,SAAUkF,EAAYlF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAC9CsK,EAAS,GACTC,EAAS,GACTC,EAAO,GASb,OAPAF,EAAOD,GAAQE,EACfD,EAAM,KAAaE,EACnBJ,EAAIK,QAAQ,SAACC,GACX,IAAMC,EAAcD,EAAOxF,GAC3BsF,EAAKhJ,KAAKmJ,GACVJ,EAAOI,GAAeD,IAEjBJ,ECbT,IAEe5H,eAFE,iBAAO,IAItB,KAFaA,CA1Bf,SAA2BtC,GAAO,IACxBK,EAAaL,EAAbK,SAEF0H,EAAe5G,sBACnB,SAACsH,GACCpI,EACEiB,EAAYnD,eACVqM,iBAAO,CACLvG,MAAOwE,EACPpE,GAAIiF,KACJmB,MAAOV,GAAU,SAKzB,CAAC1J,IAEH,OAAOkB,EAAAC,EAAAC,cAACiJ,GAAD,CAAU3C,aAAcA,MCrBjC,SAAS4C,GAAO3K,GAAO,IACb4K,EAAmB5K,EAAnB4K,KAAM1G,EAAalE,EAAbkE,SAEd,OACE3C,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACEG,WAAW,kBACXD,QAAS,IACT8F,GAAID,EACJE,QAAM,EACNC,cAAY,EACZC,eAAa,GAEbzJ,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLsB,SAAU,WACVqB,MAAO,MACP2G,SAAU,QACV/F,OAAQ,QACRrD,gBAAiB,OACjBqJ,UAAW,SACXC,UAAW,SACXC,QAAS,IACTC,OAAQ,QAEV5E,UAAU,+BAETvC,IAWTyG,GAAOxI,aAAe,CACpByI,MAAM,EACN1G,SAAU,IAGGyG,UC1Cf,SAASW,GAAKtL,GAAO,IACX4K,EAAkB5K,EAAlB4K,KAAM1I,EAAYlC,EAAZkC,QAEd,OACEX,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAeG,WAAW,WAAW6F,GAAID,EAAM7F,QAAS,IAAKgG,cAAY,EAACC,eAAa,GACrFzJ,EAAAC,EAAAC,cAAA,OACES,QAASA,EACTqJ,KAAK,SACL5J,MAAO,CAELsB,SAAU,WACVpB,gBAAiB,sBACjB2J,IAAK,IACLC,KAAM,IACNvG,OAAQ,QACRZ,MAAO,OACP+G,OAAQ,QAEV5E,UAAU,0BAWlB6E,GAAKnJ,aAAe,CAClBD,QAAS,WAEP8E,QAAQC,IAAI,kBAIDqE,UCJf,IAIehJ,eAJE,SAAAC,GAAA,MAAkB,CACjChD,aADegD,EAAGuB,QACIlD,IAAI,kBAK1B,KAFa0B,CA9Bf,SAA2BtC,GAAO,IACxBK,EAA2BL,EAA3BK,SAAUd,EAAiBS,EAAjBT,aACZmM,EAAsBvK,sBAAY,WACtCd,EAASb,MACR,CAACa,IAEJ,OACEkB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACE/D,EAAAC,EAAAC,cAACkK,GAAD,CAAMf,KAAMrL,EAAc2C,QAASwJ,IACnCnK,EAAAC,EAAAC,cAACmK,GAAD,CAAQhB,KAAMrL,GACZgC,EAAAC,EAAAC,cAACoK,GAAD,MACAtK,EAAAC,EAAAC,cAACqK,GAAD,8BCjBR,SAASC,GAAS/L,GAChB,OAAOuB,EAAAC,EAAAC,cAACuK,GAAA,EAAiBhM,GAS3B+L,GAAS5J,aAAe,CACtBD,QAAS,KACT0E,SAAS,EACTqF,UAAU,GAGGF,UCJf,SAASG,GAAalM,GAAO,IAEzBvB,EACEuB,EADFvB,MAAO0N,EACLnM,EADKmM,oBAAqBC,EAC1BpM,EAD0BoM,oBAAqBxH,EAC/C5E,EAD+C4E,WAAYyH,EAC3DrM,EAD2DqM,gBAFpChF,EAIqBC,mBAAS,IAJ9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIpBiF,EAJoB/E,EAAA,GAIFgF,EAJEhF,EAAA,GAMrBiF,EAAqBrL,sBAAY,SAACoE,GACtCgH,EAAoBhH,EAAI4C,OAAOC,QAC9B,IAEGC,EAAelH,sBACnB,SAACoE,GACC,IADO+C,EAEyB/C,EAAxBgD,QAASC,OAFV,IAAAF,GAEmB,EAFnBA,EAGDmE,EAAgBlH,EAAI4C,OAAOC,MACJ,IAAzBqE,EAAc5M,QAHA,KAGgB2I,IAChC2D,EACE9J,cAAI,CACFgC,GAAIiF,KACJrF,MAAOwI,EACP7F,SAAS,KAGb2F,EAAoB,MAGxB,CAACA,EAAqBJ,IAGxB,OACE5K,EAAAC,EAAAC,cAACW,GAAA,EAAD,KACEb,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAUyH,OAAK,GACbnL,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAY1E,QAAQ,KAAK2K,cAAY,GAClClO,EAAMmC,IAAI,WAGfW,EAAAC,EAAAC,cAACsF,GAAA,EAAD,CAAiBN,UAAU,mBACxBhI,EAAMiC,MAAM,CAAC,QAAS,SAASC,IAAI,SAACiM,GACnC,IAAMC,EAAQpO,EAAMiC,MAAM,CAAC,QAAS,SAAUkM,IAC9C,OACErL,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAeC,IAAK+H,EAAMjM,IAAI,MAAOmE,QAAS,IAAKC,WAAW,YAC5DzD,EAAAC,EAAAC,cAACF,EAAAC,EAAM8D,SAAP,CAAgBR,IAAK+H,EAAMjM,IAAI,OAC7BW,EAAAC,EAAAC,cAACwD,EAAA,EAAD,KACE1D,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAYjB,QAAS,kBAAMmK,EAAgBQ,KACzCtL,EAAAC,EAAAC,cAACqL,GAAD,CAAUb,SAAUrH,EAAYxB,KAAK,QAAQwD,QAASiG,EAAMjM,IAAI,cAElEW,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAcC,QAASwH,EAAMjM,IAAI,WAChCgE,EACCrD,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAYjB,QAAS,kBAAMkK,EAAoBS,KAC7CtL,EAAAC,EAAAC,cAACgE,EAAAjE,EAAD,OAEA,MAEND,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAAS9E,QAAQ,gBAM1B4C,EACCrD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,KACE1D,EAAAC,EAAAC,cAACsL,GAAA,EAAD,CACE3E,MAAOkE,EACPzD,QAASR,EACTO,SAAU4D,EACVQ,YAAY,uCACZjE,WAAS,KAGX,MAaVmD,GAAa/J,aAAe,CAC1BgK,oBAAqB,WAEnBnF,QAAQC,IAAI,wBAEdmF,oBAAqB,WAEnBpF,QAAQC,IAAI,wBAEdoF,gBAAiB,WAEfrF,QAAQC,IAAI,oBAEdrC,YAAY,GAGCsH,UCvGf,SAASe,GAAkBjN,GAAO,IAGdrB,EAIdqB,EALFkN,MACEC,OAAU9I,GAEZ+I,EAEEpN,EAFFoN,iBACA/M,EACEL,EADFK,SAGFgN,oBAAU,WACRhN,EAASiB,EAAY5C,0BAA0BC,KAC9C,CAACA,EAAQ0B,IAEZ,IAAMjB,EAA4B+B,sBAChC,SAAC9B,GACCgB,EAASiB,EAAYlC,0BAA0BC,KAEjD,CAACgB,IAGH,OAAwB,MAApB+M,EAAiC7L,EAAAC,EAAAC,cAAA,kCAGnCF,EAAAC,EAAAC,cAAC6L,GAAD,CACEjB,gBAAiBjN,EACjBX,MAAO2O,EACPxI,YAAY,IAkBlBqI,GAAkB9K,aAAe,CAC/BiL,iBAAkB,MAGpB,IAMe9K,eANE,SAAAC,GAAA,IAAGuB,EAAHvB,EAAGuB,QAAStB,EAAZD,EAAYC,MAAZ,MAAyB,CACxCjD,aAAcuE,EAAQlD,IAAI,gBAC1BsG,aAAc1E,EAAM9B,MAAM,CAAC,QAAS,WACpC0M,iBAAkB5K,EAAM5B,IAAI,qBAK5B,KAFa0B,CAGb2K,yBCnDF,SAASM,GAAevN,GAAO,IACrByE,EAA2CzE,EAA3CyE,YAAakB,EAA8B3F,EAA9B2F,OAAQ6H,EAAsBxN,EAAtBwN,kBAEvBC,EAA0CjN,kBAC9C,kBAAMqJ,GAA0B2D,IAChC,CAACA,IAGH,OACEjM,EAAAC,EAAAC,cAACoF,GAAD,CAAM5C,MAAM,4BACV1C,EAAAC,EAAAC,cAACqF,EAAA,EAAD,MACAvF,EAAAC,EAAAC,cAACsF,GAAA,EAAD,CAAiBN,UAAU,mBACxBd,EAAOhF,IAAI,SAAAlC,GAAK,OACf8C,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAeC,IAAKrG,EAAMmC,IAAI,MAAOmE,QAAS,IAAKC,WAAW,YAC5DzD,EAAAC,EAAAC,cAACF,EAAAC,EAAM8D,SAAP,KACE/D,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAU/C,QAAS,kBAAMuC,EAAYhG,IAAQ0G,QAAM,GACjD5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAcC,QAAS5G,EAAMmC,IAAI,WACjCW,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAYjB,QAAS,SAAAqD,GAAG,OAAIkI,EAAwClI,EAAK9G,KACvE8C,EAAAC,EAAAC,cAACiM,GAAAlM,EAAD,cAiBlB+L,GAAepL,aAAe,CAC5BsC,YAAa,WAEXuC,QAAQC,IAAI,gBAEduG,kBAAmB,WAEjBxG,QAAQC,IAAI,uBAIDsG,+BC9Cf,SAASI,GAAe3N,GAAO,IACrByE,EAA2CzE,EAA3CyE,YAAakB,EAA8B3F,EAA9B2F,OAAQ6H,EAAsBxN,EAAtBwN,kBAEvBC,EAA0CjN,kBAC9C,kBAAMqJ,GAA0B2D,IAChC,CAACA,IAGH,OACEjM,EAAAC,EAAAC,cAACoF,GAAD,CAAM5C,MAAM,4BACV1C,EAAAC,EAAAC,cAACqF,EAAA,EAAD,MACAvF,EAAAC,EAAAC,cAACsF,GAAA,EAAD,CAAiBN,UAAU,mBACxBd,EAAOhF,IAAI,SAAAlC,GAAK,OACf8C,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAeC,IAAKrG,EAAMmC,IAAI,MAAOmE,QAAS,IAAKC,WAAW,YAC5DzD,EAAAC,EAAAC,cAACF,EAAAC,EAAM8D,SAAP,KACE/D,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAU/C,QAAS,kBAAMuC,EAAYhG,IAAQ0G,QAAM,GACjD5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAcC,QAAS5G,EAAMmC,IAAI,WAChCnC,EAAMmC,IAAI,YAAc,KACvBW,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACEjB,QAAS,SAAAqD,GAAG,OAAIkI,EAAwClI,EAAK9G,KAE7D8C,EAAAC,EAAAC,cAACmM,GAAApM,EAAD,cAkBpBmM,GAAexL,aAAe,CAC5BsC,YAAa,WAEXuC,QAAQC,IAAI,gBAEduG,kBAAmB,WAEjBxG,QAAQC,IAAI,uBAID0G,UCxDf,SAASE,GAAc7N,GAAO,IAE1B8N,EACE9N,EADF8N,eAAgBzN,EACdL,EADcK,SAAUC,EACxBN,EADwBM,QAAS4G,EACjClH,EADiCkH,aAAc6G,EAC/C/N,EAD+C+N,eAG7CC,EAA+BxN,kBACnC,kBAAMsN,EAAenN,IAAI,SAAAhC,GAAM,OAAIuI,EAAatG,IAAIjC,GAAQsP,IAAI,WAAYF,EAAe1E,SAAS1K,OACpG,CAACmP,EAAgB5G,EAAc6G,IAG3BG,EAAe1N,kBAAQ,kBAAMuN,EAAepN,IAAI,SAAAhC,GAAM,OAAIuI,EAAatG,IAAIjC,MAAU,CACzFoP,EACA7G,IAGIiH,EAAahN,sBACjB,SAAC1C,GACC,IAAM4F,EAAK5F,EAAMmC,IAAI,MACrBP,EAASiB,EAAYvC,yBAAyBsF,KAEhD,CAAChE,IAGG+N,EAAejN,sBACnB,SAAC1C,GACC4B,EAASiB,EAAYtC,4BAA4BP,EAAMmC,IAAI,SAE7D,CAACP,IAGGoE,EAActD,sBAClB,SAAC1C,GACC,IAAM4F,EAAK5F,EAAMmC,IAAI,MACrBP,EAASiB,EAAY1C,yBAAyByF,IAC9C/D,EAAQc,KAAR,SAAAC,OAAsB5C,EAAMmC,IAAI,SAElC,CAACP,EAAUC,IAGb,OACEiB,EAAAC,EAAAC,cAACF,EAAAC,EAAM8D,SAAP,KACE/D,EAAAC,EAAAC,cAAC4M,GAAD,CACEb,kBAAmBY,EACnB3J,YAAaA,EACbkB,OAAQuI,IAEV3M,EAAAC,EAAAC,cAAC6M,GAAD,CACEd,kBAAmBW,EACnB1J,YAAaA,EACbkB,OAAQqI,KAgBhBH,GAAc1L,aAAe,GAE7B,IAMeG,eANE,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,MAAgB,CAC/BsL,eAAgBtL,EAAM5B,IAAI,iBAC1BmN,eAAgBvL,EAAM5B,IAAI,iBAC1BsG,aAAc1E,EAAM9B,MAAM,CAAC,QAAS,aAKpC,KAFa4B,CAGbuL,IC5EIU,GAAc,CAClBC,sBAAuB,wBACvBC,yBAA0B,4BAG5B,SAASC,GAAYC,EAAQC,GAC3B,IAAMC,EAAeF,EACfG,EAAoBH,EAAO/N,IAAI,SAC/BmO,EAA0BJ,EAAOjO,MAAM,CAAC,QAAS,WACjDsO,EAAwBL,EAAOjO,MAAM,CAAC,QAAS,SAErD,OAAQkO,EAAOvQ,MACb,KAAKkQ,GAAYC,sBAAuB,IACrBnP,EAAcuP,EAAvBtQ,QACF+F,EAAKhF,EAAUuB,IAAI,MACzB,OAAOiO,EAAaZ,IAClB,QACAa,EAAkBG,MAAM,CACtB9E,OAAQ4E,EAAwBd,IAAI5J,EAAIhF,GACxC+K,KAAM4E,EAAsB5N,KAAKiD,MAIvC,KAAKkK,GAAYE,yBAA0B,IAEnCS,EADyBN,EAAvBtQ,QACmBsC,IAAI,MAC/B,OAAOiO,EAAaZ,IAClB,QACAa,EAAkBG,MAAM,CACtB9E,OAAQ4E,EAAwBI,OAAOD,GACvC9E,KAAM4E,EAAsBvO,OAAO,SAAA4D,GAAE,OAAIA,IAAO6K,OAItD,QACE,OAAOP,GAIb,SAASS,GAAyBpP,GAAO,IAGrBrB,EAIdqB,EALFkN,MACEC,OAAU9I,GAEZhE,EAEEL,EAFFK,SAIIgP,EAFFrP,EADFkH,aAG+BtG,IAAIjC,GATE2Q,EAWRC,qBAAWb,GAAaW,GAXhBG,EAAAhI,OAAAC,EAAA,EAAAD,CAAA8H,EAAA,GAWhC7Q,EAXgC+Q,EAAA,GAWzBC,EAXyBD,EAAA,GAavCnC,oBAAU,WACK,MAAT5O,GAAe4B,EAASiB,EAAYhC,qBAAqBb,KAC5D,CAACA,EAAO4B,IAEX,IAAM8L,EAAsBhL,sBAC1B,SAACuO,GACCD,EAAc,CACZpR,KAAMkQ,GAAYC,sBAClBlQ,QAASoR,KAGb,CAACD,IAGGrD,EAAsBjL,sBAC1B,SAAC9B,GACCoQ,EAAc,CACZpR,KAAMkQ,GAAYE,yBAClBnQ,QAASe,KAGb,CAACoQ,IAKH,OAAmB,MAAfJ,EAA4B9N,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAUqM,GAAG,MAG3CpO,EAAAC,EAAAC,cAAC6L,GAAD,CACEnB,oBAAqBA,EACrBC,oBAAqBA,EAErB3N,MAAOA,EACPmG,YAAU,IAiBhBwK,GAAyBjN,aAAe,GAExC,IAKeG,eALE,SAAAC,GAAA,IAAGuB,EAAHvB,EAAGuB,QAAStB,EAAZD,EAAYC,MAAZ,MAAyB,CACxCjD,aAAcuE,EAAQlD,IAAI,gBAC1BsG,aAAc1E,EAAM9B,MAAM,CAAC,QAAS,aAKpC,KAFa4B,CAGb8M,IC1EaQ,IC9BXC,GAyBAC,GDKWF,GAvCf,WACE,OACErO,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLsB,SAAU,WACViC,OAAQ,QACRoB,QAAS,OACTyJ,SAAU,kBAGZxO,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLsB,SAAU,WACVrB,KAAM,IACNsJ,UAAW,SACXC,UAAW,WAGb5J,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAO5D,KAAK,YAAY+D,UAAWwJ,KACnC1L,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAO5D,KAAK,YAAY+D,UAAW2L,KACnC7N,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAOG,UAAWoK,OAGtBtM,EAAAC,EAAAC,cAACuO,EAAD,MACAzO,EAAAC,EAAAC,cAACwO,GAAD,8EE3BAC,GAAe1F,iBAAO,CAC1BjL,cAAc,EACdG,KAAM,MA6BOyQ,GArBO,WAAkC,IAAjCC,EAAiCxQ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBsQ,GAActB,EAAWhP,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAAuQ,EACdzB,EAAhCvQ,YAD8C,IAAAgS,EACvC,KADuCA,EAAAC,EACd1B,EAAnBtQ,eADiC,IAAAgS,EACvB,KADuBA,EAEtD,GAAY,MAARjS,EACF,MAAM,IAAIkS,MAAJ,WAAAlP,OAAqBuN,EAArB,wBAER,OAAQA,EAAOvQ,MACb,IvBzB0B,iBuB0BxB,OAAO+R,EAAMnC,IAAI,gBAAgB,GAEnC,IvB1B0B,iBuB2BxB,OAAOmC,EAAMnC,IAAI,gBAAgB,GAEnC,IvB3B+B,sBuB4B7B,IAAMvO,EAAOpB,EACb,OAAO8R,EAAMnC,IAAI,OAAQvO,GAE3B,QACE,OAAO0Q,IC1BPF,GAAe1F,iBAAO,CAC1BgG,MAAOzG,GAAU,CACf,CACE1F,GAAIiF,KACJrF,MAAO,uCACPwG,MAAOV,GAAU,CACf,CACE1F,GAAIiF,KACJrF,MAAO,iHACP2C,SAAS,GAEX,CACEvC,GAAIiF,KACJrF,MAAO,qGACP2C,SAAS,GAEX,CACEvC,GAAIiF,KACJrF,MAAO,uHACP2C,SAAS,GAEX,CACEvC,GAAIiF,KACJrF,MAAO,+FACP2C,SAAS,GAEX,CACEvC,GAAIiF,KACJrF,MAAO,uHACP2C,SAAS,QAKjB6J,cAAe,GACfC,cAAe,GACfC,gBAAiB,OAiHJC,GAzGM,WAAkC,IAAjCR,EAAiCxQ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBsQ,GAActB,EAAWhP,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAAuQ,EACbzB,EAAhCvQ,YAD6C,IAAAgS,EACtC,KADsCA,EAAAC,EACb1B,EAAnBtQ,eADgC,IAAAgS,EACtB,KADsBA,EAErD,GAAY,MAARjS,EACF,MAAM,IAAIkS,MAAM,uCAIlB,IAAMC,EAAQJ,EAAMxP,IAAI,SAElBiQ,EAAcT,EAAM1P,MAAM,CAAC,QAAS,WAEpCoQ,EAAYV,EAAM1P,MAAM,CAAC,QAAS,SAExC,OAAQkO,EAAOvQ,MACb,I1BpE6B,oB0BoEO,IACjB0S,EAAYnC,EAArBtQ,QACF+F,EAAK0M,EAAQnQ,IAAI,MACvB,OAAOwP,EAAMnC,IACX,QACAuC,EAAMvB,MAAM,CACV9E,OAAQ0G,EAAY5C,IAAI5J,EAAI0M,GAC5B3G,KAAM0G,EAAU1P,KAAKiD,MAI3B,I1B7EgC,uB0B6EO,IAE/B6K,EAD0BN,EAAxBtQ,QACoBsC,IAAI,MAChC,OAAOwP,EAAMnC,IACX,QACAuC,EAAMvB,MAAM,CACV9E,OAAQ0G,EAAY1B,OAAOD,GAC3B9E,KAAM0G,EAAUrQ,OAAO,SAAA4D,GAAE,OAAIA,IAAO6K,OAI1C,I1BtFoC,2B0BuFlC,IAAM8B,EAAW1S,EACjB,OAAO8R,EAAMnC,IAAI,kBAAmB+C,GAEtC,I1BxF0C,iC0ByFxC,IAAM3M,EAAK/F,EACX,OAAO8R,EAAMnC,IAAI,kBAAmBmC,EAAM1P,MAAM,CAAC,QAAS,SAAU2D,KAEtE,I1B1F0C,iC0B0FO,IAC9B4M,EAAiBrC,EAA1BtQ,QACF4S,EAAqBd,EACxBxP,IAAI,iBACJH,OAAO,SAAA9B,GAAM,OAAIsS,IAAiBtS,IAClCwS,QAAQF,GACX,OAAOb,EAAMnC,IAAI,gBAAiBiD,GAEpC,I1BhG6C,oC0BgGO,IACjCD,EAAiBrC,EAA1BtQ,QACF4S,EAAqBd,EACxBxP,IAAI,iBACJH,OAAO,SAAA9B,GAAM,OAAIsS,IAAiBtS,IACrC,OAAOyR,EAAMnC,IAAI,gBAAiBiD,GAEpC,I1BrG0C,iC0BqGO,IAC9BD,EAAiBrC,EAA1BtQ,QACF4S,EAAqBd,EACxBxP,IAAI,iBACJH,OAAO,SAAA9B,GAAM,OAAIsS,IAAiBtS,IAClCwS,QAAQF,GACX,OAAOb,EAAMnC,IAAI,gBAAiBiD,GAEpC,I1B3G6C,oC0B2GO,IACjCD,EAAiBrC,EAA1BtQ,QACF4S,EAAqBd,EACxBxP,IAAI,iBACJH,OAAO,SAAA9B,GAAM,OAAIsS,IAAiBtS,IACrC,OAAOyR,EAAMnC,IAAI,gBAAiBiD,GAKpC,I1B7GoC,2B0B8GlC,IACME,EAAW,CAAC,kBAAmB,QAAS,SAD7B9S,EACgDsC,IAAI,MAAO,WAC5E,OAAOwP,EAAMiB,MAAMD,GAAWhB,EAAM1P,MAAM0Q,IAG5C,I1BvHkD,yC0BwHhD,IAAME,EAAgBhT,EAChBiT,EAAmBnB,EAAM1P,MAAM,CAAC,kBAAmB,QAAS,OAAQ4Q,IAC1E,OAAOlB,EAAMiB,MAAM,CAAC,kBAAmB,QAAS,SAAUE,EAAkB,YAAY,GAG1F,I1B3HoD,2C0B4HlD,IAAM5S,EAASL,EACf,OAAO8R,EAAMiB,MAAM,CAAC,kBAAmB,QAAS,SAAU1S,EAAQ,YAAY,GAGhF,I1B1HmC,0B0B2HjC,IAAMP,EAAOE,EACP+F,EAAKjG,EAAKwC,IAAI,MACpB,OAAOwP,EAAMiB,MAAM,CAAC,QAAS,SAAUhN,GAAKjG,GAG9C,QACE,OAAOgS,IC/IEoB,GAPEC,aAAgB,CAC/B3N,QAASqM,GACT3N,MAAOkP,eC4CMC,kBJpCTC,GAAiBC,eAEjBC,GAAc,CAACF,IAIfG,GAAmBC,OAAOC,sCAAwCC,KAExE,GAAIjJ,KACFjC,QAAQC,IAAI,4CACZ4I,GAAQsC,aACNX,GAEAO,GAAiBK,KAAehM,WAAf,EAAmB0L,UAEjC,CACL,IAAMO,GAAgB,CACpBC,WAAY,CAACC,QACbzN,IAAK,OACL0N,cAGIC,GAAmBC,0BAAeL,GAAeb,IAEvD3B,GAAQsC,aAAYM,GAAkBL,KAAehM,WAAf,EAAmB0L,KAG3DF,GAAee,IAAIC,IAId3J,OACH6G,GAAY+C,wBAAahD,KKdZiD,OArBf,WACE,OAAI7J,GAEA1H,EAAAC,EAAAC,cAACsR,EAAA,EAAD,CAAUlD,MAAOA,IACftO,EAAAC,EAAAC,cAACuR,EAAA,EAAD,KACEzR,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAO5D,KAAK,IAAI+D,UAAWmM,OAMjCrO,EAAAC,EAAAC,cAACsR,EAAA,EAAD,CAAUlD,MAAOA,IACftO,EAAAC,EAAAC,cAACwR,EAAA,EAAD,CAAanD,UAAWA,GAAWoD,QAAS3R,EAAAC,EAAAC,cAAA,yBAC1CF,EAAAC,EAAAC,cAACuR,EAAA,EAAD,KACEzR,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAO5D,KAAK,IAAI+D,UAAWmM,uBCnBrCuD,IAAS5P,OAAO6P,IAAM3R,cAAcqR,IAAMO,SAASC,eAAe","file":"static/js/main.5750887e.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\n\nexport const addTaskToTasks = task => ({\n  type: actionTypes.ADD_TASK_TO_TASKS,\n  payload: task,\n});\n\nexport const removeTaskInTasks = task => ({\n  type: actionTypes.REMOVE_TASK_IN_TASKS,\n  payload: task,\n});\n\nexport const changeCurrentTodoTask = $task => ({\n  type: actionTypes.CHANGE_CURRENT_TODO_TASK,\n  payload: $task,\n});\n\nexport const changeCurrentTodoTaskById = taskId => ({\n  type: actionTypes.CHANGE_CURRENT_TODO_TASK_BY_ID,\n  payload: taskId,\n});\n\nexport const addTaskIdToRecentTaskIds = $taskId => ({\n  type: actionTypes.ADD_TASK_ID_TO_RECENT_TASK_IDS,\n  payload: $taskId,\n});\n\nexport const removeTaskIdInRecentTaskIds = $taskId => ({\n  type: actionTypes.REMOVE_TASK_ID_IN_RECENT_TASK_IDS,\n  payload: $taskId,\n});\n\nexport const addTaskIdToPinnedTaskIds = $taskId => ({\n  type: actionTypes.ADD_TASK_ID_TO_PINNED_TASK_IDS,\n  payload: $taskId,\n});\n\nexport const removeTaskIdInPinnedTaskIds = $taskId => ({\n  type: actionTypes.REMOVE_TASK_ID_IN_PINNED_TASK_IDS,\n  payload: $taskId,\n});\n\n// -- task item\n\nexport const checkTaskItemInTaskItemsByIndex = index => ({\n  type: actionTypes.CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_INDEX,\n  payload: index,\n});\n\nexport const checkTaskItemInTaskItemsByTaskId = taskId => ({\n  type: actionTypes.CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_TASK_ID,\n  payload: taskId,\n});\n\nexport const toggleTaskItemPropChecked = $taskItem => ({\n  type: actionTypes.TOGGLE_TASK_ITEM_CHECKED,\n  payload: $taskItem,\n});\n\n// edting task\n\nexport const updateTaskFromEdting = $task => ({\n  type: actionTypes.UPDARE_TASK_FROM_EDTING,\n  payload: $task,\n});\n","export const ADD_TASK_TO_TASKS = 'ADD_TASK_TO_TASKS';\n\nexport const REMOVE_TASK_IN_TASKS = 'REMOVE_TASK_IN_TASKS';\n\nexport const CHANGE_CURRENT_TODO_TASK = 'CHANGE_CURRENT_TODO_TASK';\n\nexport const CHANGE_CURRENT_TODO_TASK_BY_ID = 'CHANGE_CURRENT_TODO_TASK_BY_ID';\n\nexport const ADD_TASK_ID_TO_RECENT_TASK_IDS = 'ADD_TASK_ID_TO_RECENT_TASK_IDS';\n\nexport const REMOVE_TASK_ID_IN_RECENT_TASK_IDS = 'REMOVE_TASK_ID_IN_RECENT_TASK_IDS';\n\nexport const ADD_TASK_ID_TO_PINNED_TASK_IDS = 'ADD_TASK_ID_TO_PINNED_TASK_IDS';\n\nexport const REMOVE_TASK_ID_IN_PINNED_TASK_IDS = 'REMOVE_TASK_ID_IN_PINNED_TASK_IDS';\n\n// -- task item\n\nexport const CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_INDEX = 'CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_INDEX';\n\nexport const CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_TASK_ID = 'CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_TASK_ID';\n\nexport const TOGGLE_TASK_ITEM_CHECKED = 'TOGGLE_TASK_ITEM_CHECKED';\n\n// editing task\n\nexport const UPDARE_TASK_FROM_EDTING = 'UPDARE_TASK_FROM_EDTING';\n\n// -- tobe removed\n","import * as actionTypes from './actionTypes';\n\nexport const showSideMenu = () => ({\n  type: actionTypes.SHOW_SIDE_MENU,\n});\n\nexport const hideSideMenu = () => ({\n  type: actionTypes.HIDE_SIDE_MENU,\n});\n\nexport const changeCurrentPath = (path, sideEffect = null) => ({\n  type: actionTypes.CHANGE_CURRENT_PATH,\n  payload: path,\n  sideEffect,\n});\n","export const SHOW_SIDE_MENU = 'SHOW_SIDE_MENU';\n\nexport const HIDE_SIDE_MENU = 'HIDE_SIDE_MENU';\n\nexport const CHANGE_CURRENT_PATH = 'CHANGE_CURRENT_PATH';\n","import React, { useCallback, useMemo } from 'react';\nimport Fab from '@material-ui/core/Fab';\nimport Proptypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { List, Map } from 'immutable';\n\nimport { COLOR_ORANGE, COLOR_GREEN, COLOR_RED } from '../utils/constants';\nimport { taskActions } from '../store/actions';\n\nconst CompleteTaskButton = (props) => {\n  const {\n    $task, $tasksItemsEntity, $tasksItemsRefs, dispatch, history,\n  } = props;\n\n  const $unchckedTaskItems = useMemo(\n    () => $tasksItemsRefs\n      .filter(taskId => !$tasksItemsEntity.getIn([taskId, 'checked']))\n      .map(taskId => $tasksItemsEntity.get(taskId)),\n    [$tasksItemsEntity, $tasksItemsRefs],\n  );\n  const numOfAllTaskItem = $tasksItemsRefs.size;\n  const numOfUncheckedItem = $unchckedTaskItems.size;\n  const numOfCheckedItem = numOfAllTaskItem - numOfUncheckedItem;\n  const isAllComleted = numOfAllTaskItem === numOfCheckedItem;\n  const hasZeroTaskItem = numOfAllTaskItem === 0;\n  const onClickCompleteButton = useCallback(() => {\n    if (hasZeroTaskItem) {\n      // 零个可完成任务项，提供跳转到编辑页面的快速方式\n      history.push(`/edit/${$task.get('id')}`);\n    } else if (isAllComleted) {\n      /* 所有任务项全部完成，跳转到APP主页 */\n      history.push('/');\n    } else {\n      dispatch(taskActions.checkTaskItemInTaskItemsByTaskId($unchckedTaskItems.getIn(['0', 'id'])));\n    }\n  }, [$task, hasZeroTaskItem, isAllComleted, $unchckedTaskItems, history, dispatch]);\n\n  let buttonText;\n  let buttonColor;\n  if (hasZeroTaskItem) {\n    buttonText = '添加任务项';\n    buttonColor = COLOR_RED;\n  } else if (isAllComleted) {\n    buttonText = `全部完成(${numOfCheckedItem}/${numOfAllTaskItem})`;\n    buttonColor = COLOR_GREEN;\n  } else {\n    buttonText = `完成一个任务项(${numOfCheckedItem}/${numOfAllTaskItem})`;\n    buttonColor = COLOR_ORANGE;\n  }\n\n  return (\n    <Fab\n      style={{\n        flex: '1',\n        backgroundColor: buttonColor,\n        color: '#fff',\n        transition: 'background-color 300ms',\n      }}\n      variant=\"extended\"\n      size=\"medium\"\n      aria-label=\"add\"\n      onClick={onClickCompleteButton}\n    >\n      {buttonText}\n    </Fab>\n  );\n};\n\nCompleteTaskButton.propTypes = {\n  $tasksItemsEntity: Proptypes.instanceOf(Map),\n  $tasksItemsRefs: Proptypes.instanceOf(List),\n  $task: Proptypes.instanceOf(Map),\n  dispatch: Proptypes.func.isRequired,\n  history: Proptypes.shape({\n    push: Proptypes.func.isRequired,\n  }).isRequired,\n};\n\nCompleteTaskButton.defaultProps = {\n  $tasksItemsRefs: new List(),\n  $tasksItemsEntity: new Map(),\n  $task: null,\n};\n\nconst mapState = ({ $Task }) => ({\n  $tasksItemsEntity: $Task.getIn(['currentTodoTask', 'items', 'entity']),\n  $tasksItemsRefs: $Task.getIn(['currentTodoTask', 'items', 'refs']),\n  $task: $Task.get('currentTodoTask'),\n});\n\nexport default connect(\n  mapState,\n  null,\n)(CompleteTaskButton);\n","export const COLOR_BLUE = '#2196f3';\n\nexport const COLOR_GREEN = '#43a047';\n\nexport const COLOR_YELLOW = '#ffeb3b';\n\nexport const COLOR_GREY = '#9e9e9e';\n\nexport const COLOR_ORANGE = '#ff5722';\n\nexport const COLOR_RED = '#f44336';\n\nexport const ROOT_URL = '/monica/';\n","import React, { useCallback } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Fab from '@material-ui/core/Fab';\nimport Proptypes from 'prop-types';\n// import MoreIcon from '@material-ui/icons/MoreVert';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport HomeIcon from '@material-ui/icons/Home';\nimport IconButton from '@material-ui/core/IconButton';\nimport { connect } from 'react-redux';\nimport { Switch, Route, withRouter } from 'react-router-dom';\n\nimport { showSideMenu } from '../../store/actions';\nimport { COLOR_BLUE } from '../../utils/constants';\nimport CompleteTaskButtonContainer from '../CompleteTaskButtonContainer';\n\nconst EditingTaskItemButton = (props) => {\n  const { onClick } = props;\n  return (\n    <Fab\n      // disabled={!isEditingTaskEdited}\n      style={{\n        flex: '1',\n        backgroundColor: COLOR_BLUE,\n        color: '#fff',\n      }}\n      onClick={onClick}\n      variant=\"extended\"\n      size=\"medium\"\n      aria-label=\"add\"\n    >\n      {'回到主页'}\n    </Fab>\n  );\n};\nEditingTaskItemButton.propTypes = {\n  onClick: Proptypes.func.isRequired,\n  // isEditingTaskEdited: Proptypes.bool.isRequired,\n};\n\nconst StartOneTaskButton = (props) => {\n  const { onClick } = props;\n  return (\n    <Fab\n      style={{ flex: '1', backgroundColor: COLOR_BLUE, color: '#fff' }}\n      variant=\"extended\"\n      size=\"medium\"\n      color=\"primary\"\n      aria-label=\"add\"\n      onClick={onClick}\n    >\n      {'开始一项任务'}\n    </Fab>\n  );\n};\n\nStartOneTaskButton.propTypes = {\n  onClick: Proptypes.func.isRequired,\n};\n\nfunction AppBarContainer(props) {\n  const { dispatch, history } = props;\n  const onClickMenuButton = useCallback(() => {\n    dispatch(showSideMenu());\n  }, [dispatch]);\n\n  const onClickEditingTaskItemButton = useCallback(() => {\n    // eslint-disable-next-line no-console\n    history.push('/');\n  }, [history]);\n\n  const onClickStartOneTaskButton = useCallback(() => {\n    dispatch(showSideMenu());\n  }, [dispatch]);\n\n  const onClickHomeButton = useCallback(() => {\n    history.push('/');\n  }, [history]);\n\n  return (\n    <AppBar\n      style={{\n        backgroundColor: 'white',\n        flex: '0 0 60px',\n      }}\n      position=\"static\"\n    >\n      <Toolbar>\n        <IconButton edge=\"start\" onClick={onClickMenuButton}>\n          <MenuIcon />\n        </IconButton>\n        <Switch>\n          <Route\n            path=\"/edit\"\n            render={() => (\n              <EditingTaskItemButton\n                // isEditingTaskEdited={isEditingTaskEdited}\n                onClick={onClickEditingTaskItemButton}\n              />\n            )}\n          />\n          <Route path=\"/todo\" component={CompleteTaskButtonContainer} />\n          <Route render={() => <StartOneTaskButton onClick={onClickStartOneTaskButton} />} />\n        </Switch>\n\n        <IconButton onClick={onClickHomeButton} edge=\"end\">\n          <HomeIcon />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\nAppBarContainer.propTypes = {\n  dispatch: Proptypes.func.isRequired,\n  history: Proptypes.shape({\n    push: Proptypes.func.isRequired,\n  }).isRequired,\n  // $currentTaskItems: Proptypes.instanceOf(List),\n};\n\nAppBarContainer.defaultProps = {\n  // $currentTaskItems: new List(),\n};\n\nconst mapState = ({ $global }) => ({\n  $currentTaskItems: $global.getIn(['$currentTask', '$items']),\n});\nexport default connect(\n  mapState,\n  null,\n)(withRouter(AppBarContainer));\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport PropTypes from 'prop-types';\n\nfunction ListWrapper(props) {\n  const { title, children } = props;\n\n  const subsubheader = title === '' ? null : (\n    <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n      {title}\n    </ListSubheader>\n  );\n\n  return (\n    <div>\n      <List\n        style={{\n          width: '100%',\n        }}\n        component=\"nav\"\n        // aria-label=\"secondary mailbox folders\"\n        subheader={subsubheader}\n      >\n        {children}\n      </List>\n    </div>\n  );\n}\n\nListWrapper.propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n};\n\nListWrapper.defaultProps = {\n  title: '',\n  children: <div>default props</div>,\n};\n\nexport default ListWrapper;\n","import React, { useCallback } from 'react';\n// import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List as ImmutableList } from 'immutable';\nimport DeleteIcon from '@material-ui/icons/DeleteForever';\nimport EditIcon from '@material-ui/icons/BorderColor';\nimport IconButton from '@material-ui/core/IconButton';\nimport {\n  ListItem,\n  ListItemText,\n  Divider,\n  Switch as SwitchButton,\n  Typography,\n} from '@material-ui/core';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport List from './List';\n\n/* eslint-disable */\nconst renderTask = ({\n  $task,\n  onClickTask,\n  onClickEditTaskButton,\n  onClickRemoveTaskButton,\n  isEditable,\n}) => (\n  <CSSTransition key={$task.get('id')} timeout={300} classNames=\"ani-fade\">\n    <ListItem style={{ height: '48px' }} onClick={() => onClickTask($task)} button={!isEditable}>\n      <ListItemText primary={$task.get('title')} />\n      {isEditable ? (\n        <React.Fragment>\n          <IconButton onClick={(evt) => onClickEditTaskButton(evt, $task)}>\n            <EditIcon />\n          </IconButton>\n          <IconButton onClick={(evt) => onClickRemoveTaskButton(evt, $task)}>\n            <DeleteIcon />\n          </IconButton>\n        </React.Fragment>\n      ) : null}\n    </ListItem>\n  </CSSTransition>\n);\n/* eslint-enable */\n\nfunction TaskList(props) {\n  const {\n    onClickTask,\n    onClickEditTaskButton,\n    onClickRemoveTaskButton,\n    $tasks,\n    isEditable,\n    onClickSwitchButton,\n  } = props;\n\n  const withStopEvtPropagation = useCallback(\n    callback => (evt, ...args) => {\n      evt.stopPropagation();\n      callback(...args);\n    },\n    [],\n  );\n\n  const subHeader = (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      }}\n    >\n      <div className=\"left\">\n        <Typography>任务列表</Typography>\n      </div>\n      <div className=\"right\">\n        <Typography>\n          {'编辑'}\n          <SwitchButton onClick={onClickSwitchButton} checked={isEditable} color=\"primary\" />\n        </Typography>\n      </div>\n    </div>\n  );\n\n  return (\n    <List title={subHeader}>\n      <Divider />\n      <TransitionGroup className=\"transition-fade\">\n        {$tasks.map($task => renderTask({\n          $task,\n          isEditable,\n          onClickTask,\n          onClickRemoveTaskButton: withStopEvtPropagation(onClickRemoveTaskButton),\n          onClickEditTaskButton: withStopEvtPropagation(onClickEditTaskButton),\n        }))}\n      </TransitionGroup>\n    </List>\n  );\n}\n\nTaskList.propTypes = {\n  $tasks: PropTypes.instanceOf(ImmutableList).isRequired,\n  onClickTask: PropTypes.func,\n  onClickRemoveTaskButton: PropTypes.func,\n  onClickEditTaskButton: PropTypes.func,\n  onClickSwitchButton: PropTypes.func,\n  isEditable: PropTypes.bool,\n  // children: PropTypes.element\n};\n\nTaskList.defaultProps = {\n  onClickTask: () => {\n    /*eslint-disable*/\n    console.log('onClickTask');\n  },\n  onClickRemoveTaskButton: () => {\n    /*eslint-disable*/\n    console.log('onClickRemoveTaskButton');\n  },\n  onClickEditTaskButton: () => {\n    /*eslint-disable*/\n    console.log('onClickEditTaskButton');\n  },\n  onClickSwitchButton: () => {\n    /*eslint-disable*/\n    console.log('onClickSwitchButton');\n  },\n  isEditable: false,\n  // children: <div>default menu content</div>\n};\n\nexport default TaskList;\n","import React, { useCallback, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Map } from 'immutable';\nimport { taskActions, globalActions } from '../store/actions';\n\nimport TaskList from '../components/TaskList';\n\nfunction TaskListContainer(props) {\n  const { $tasks, dispatch, history } = props;\n  const $tasksEntity = $tasks.get('entity');\n  const $tasksRefs = $tasks.get('refs');\n  const $taskList = useMemo(() => $tasksRefs.map(taskId => $tasksEntity.get(taskId)), [\n    $tasksEntity,\n    $tasksRefs,\n  ]);\n\n  const [isEditable, setIsEditable] = useState(false);\n\n  const toggleIsEditable = useCallback(() => {\n    // setIsEditable(prevFlag => !prevFlag);\n    setIsEditable(!isEditable);\n  }, [setIsEditable, isEditable]);\n\n  const onClickEditTaskButton = useCallback(\n    ($task) => {\n      dispatch(globalActions.hideSideMenu());\n      history.push(`/edit/${$task.get('id')}`);\n    },\n    [dispatch, history],\n  );\n\n  const onClickRemoveTaskButton = useCallback(\n    ($task) => {\n      dispatch(taskActions.removeTaskInTasks($task));\n      dispatch(taskActions.removeTaskIdInRecentTaskIds($task.get('id')));\n    },\n    [dispatch],\n  );\n\n  const onClickTask = useCallback(\n    ($task) => {\n      // 防止编辑模式点击，然后进入到任务模式，只能在非编辑模式下进入任务\n      if (isEditable) return;\n\n      const taskId = $task.get('id');\n      dispatch(globalActions.hideSideMenu());\n      dispatch(taskActions.addTaskIdToRecentTaskIds(taskId));\n      history.push(`/todo/${$task.get('id')}`);\n    },\n    [dispatch, history, isEditable],\n  );\n\n  return (\n    <TaskList\n      onClickEditTaskButton={onClickEditTaskButton}\n      onClickRemoveTaskButton={onClickRemoveTaskButton}\n      onClickTask={onClickTask}\n      isEditable={isEditable}\n      onClickSwitchButton={toggleIsEditable}\n      $tasks={$taskList}\n    />\n  );\n}\n\nTaskListContainer.propTypes = {\n  $tasks: PropTypes.instanceOf(Map).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapState = ({ $global, $Task }) => ({\n  showSideMenu: $global.get('showSideMenu'),\n  $tasks: $Task.get('tasks'),\n});\n\nexport default withRouter(\n  connect(\n    mapState,\n    null,\n  )(TaskListContainer),\n);\n","import React, { useCallback, useState } from 'react';\n\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport TextField from '@material-ui/core/TextField';\n\nimport PropTypes from 'prop-types';\n\nimport List from './List';\n\nfunction MenuList(props) {\n  const { onCreateTask } = props;\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n\n  const onInputCreateTask = useCallback((evt) => {\n    setNewTaskTitle(evt.target.value);\n  }, []);\n\n  const onKeyEnterUp = useCallback(\n    (evt) => {\n      const KEY_ENTER = 13;\n      const { keyCode: keyUp = -1 } = evt;\n      const taskTitle = evt.target.value;\n      if (taskTitle.length !== 0 && keyUp === KEY_ENTER) {\n        onCreateTask(taskTitle);\n        setNewTaskTitle('');\n      }\n    },\n    [setNewTaskTitle, onCreateTask],\n  );\n  return (\n    <List title=\"菜单项\">\n      <Divider />\n      <ListItem>\n        <TextField\n          label=\"创建新任务\"\n          onChange={onInputCreateTask}\n          onKeyUp={onKeyEnterUp}\n          type=\"text\"\n          value={newTaskTitle}\n          margin=\"normal\"\n          variant=\"outlined\"\n          fullWidth\n        />\n      </ListItem>\n    </List>\n  );\n}\n\nMenuList.propTypes = {\n  onCreateTask: PropTypes.func,\n};\n\nMenuList.defaultProps = {\n  onCreateTask: () => {\n    /*eslint-disable*/\n    console.log('onCreateTask');\n  },\n};\n\nexport default MenuList;\n","/**\n * @param {String} host\n */\nconst createIsDev = host => () => {\n  const hosts = ['localhost', '127.0.0.1'];\n  return hosts.some(hs => host.includes(hs));\n};\n\n// eslint-disable-next-line no-restricted-globals\nexport const isDev = createIsDev(location.host);\n// export const isDev = () => false;\nexport const foo = 'nothing';\n","import { isDev } from '../env';\n\nexport const uniqueId = (function saveNextId() {\n  let curID = -1;\n  let date = Date.now().toString();\n  if (isDev()) {\n    console.log('处于开发模式中');\n    date = 1566347293201; // 固定时间，防止每次刷新改变时间，导致程序无法根据id找到对应任务\n  }\n  return function generatorOfUniqueId(prefix = '') {\n    curID += 1;\n    if (prefix.length === 0) return `${date}-${curID}`;\n    return `${prefix}-${date}-${curID}`;\n  };\n}());\n\nexport function deepCopy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nexport function withStopEventtPropagation(func) {\n  return (evt, ...args) => {\n    evt.stopPropagation();\n    return func(...args);\n  };\n}\n\n/**\n *\n * @param {Array} arr\n * @param {String} name\n * @param {String} key\n */\nexport function normalize(arr, name = 'entity', key = 'id') {\n  const result = {};\n  const entity = {};\n  const refs = [];\n  const refsName = 'refs';\n  result[name] = entity;\n  result[refsName] = refs;\n  arr.forEach((oriObj) => {\n    const identityKey = oriObj[key];\n    refs.push(identityKey);\n    entity[identityKey] = oriObj;\n  });\n  return result;\n}\n","import React, { useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fromJS } from 'immutable';\nimport MenuList from '../../components/MenuList';\nimport { uniqueId, normalize } from '../../utils';\nimport { taskActions } from '../../store/actions';\n\nfunction MenuListContainer(props) {\n  const { dispatch } = props;\n\n  const onCreateTask = useCallback(\n    (taskTitle) => {\n      dispatch(\n        taskActions.addTaskToTasks(\n          fromJS({\n            title: taskTitle,\n            id: uniqueId(),\n            items: normalize([]),\n          }),\n        ),\n      );\n    },\n    [dispatch],\n  );\n  return <MenuList onCreateTask={onCreateTask} />;\n}\n\nMenuListContainer.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nconst mapState = () => ({});\n\nexport default connect(\n  mapState,\n  null,\n)(MenuListContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\n\nfunction Drawer(props) {\n  const { show, children } = props;\n\n  return (\n    <CSSTransition\n      classNames=\"ani-slide-right\"\n      timeout={300}\n      in={show}\n      appear\n      mountOnEnter\n      unmountOnExit\n    >\n      <div\n        style={{\n          position: 'absolute',\n          width: '65%',\n          maxWidth: '375px',\n          height: '100vh',\n          backgroundColor: '#fff',\n          overflowY: 'scroll', //* 防止子margin-top影响父margin-top *\n          overflowX: 'hidden',\n          opacity: '1',\n          zIndex: '3000',\n        }}\n        className=\"transition-slide-right-self\"\n      >\n        {children}\n      </div>\n    </CSSTransition>\n  );\n}\n\nDrawer.propTypes = {\n  show: PropTypes.bool,\n  children: PropTypes.node,\n};\n\nDrawer.defaultProps = {\n  show: true,\n  children: '',\n};\n\nexport default Drawer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\n\nfunction Mask(props) {\n  const { show, onClick } = props;\n\n  return (\n    <CSSTransition classNames=\"ani-fade\" in={show} timeout={300} mountOnEnter unmountOnExit>\n      <div\n        onClick={onClick}\n        role=\"button\"\n        style={{\n          // display: show ? 'block' : 'none',\n          position: 'absolute',\n          backgroundColor: 'rgba(0, 0, 0, 0.75)',\n          top: '0',\n          left: '0',\n          height: '100vh',\n          width: '100%',\n          zIndex: '2000',\n        }}\n        className=\"transition-fade-self\"\n      />\n    </CSSTransition>\n  );\n}\n\nMask.propTypes = {\n  onClick: PropTypes.func,\n  show: PropTypes.bool.isRequired,\n};\n\nMask.defaultProps = {\n  onClick: () => {\n    /*eslint-disable*/\n    console.log('Mask:onClick');\n  },\n};\n\nexport default Mask;\n","import React, { useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { hideSideMenu } from '../../store/actions';\n\nimport TaskListContainer from '../TaskListContainer';\nimport MenuListContainer from '../MenuListContainer';\nimport Drawer from '../../components/Drawer';\nimport Mask from '../../components/mask';\n\nfunction SideMenuContainer(props) {\n  const { dispatch, showSideMenu } = props;\n  const onClickSideMenuMask = useCallback(() => {\n    dispatch(hideSideMenu());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Mask show={showSideMenu} onClick={onClickSideMenuMask} />\n      <Drawer show={showSideMenu}>\n        <TaskListContainer />\n        <MenuListContainer />\n      </Drawer>\n    </>\n  );\n}\n\nSideMenuContainer.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  showSideMenu: PropTypes.bool.isRequired,\n};\n\n// SideMenuContainer.defaultProps = {\n//   showSideMenu: true,\n// };\n\nconst mapState = ({ $global }) => ({\n  showSideMenu: $global.get('showSideMenu'),\n});\n\nexport default connect(\n  mapState,\n  null,\n)(SideMenuContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AntdCheckbox from 'antd/es/checkbox';\n\nfunction Checkbox(props) {\n  return <AntdCheckbox {...props} />;\n}\n\nCheckbox.propTypes = {\n  onClick: PropTypes.func,\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n};\n\nCheckbox.defaultProps = {\n  onClick: null,\n  checked: false,\n  disabled: false,\n};\n\nexport default Checkbox;\n","import React, { useState, useCallback } from 'react';\nimport List from '@material-ui/core/List';\nimport Input from '@material-ui/core/Input';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/DeleteForever';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport { Map } from 'immutable';\n\nimport Checkbox from './Checkbox';\nimport { uniqueId } from '../utils';\n\nfunction TaskItemList(props) {\n  const {\n    $task, onCreateNewTaskItem, onClickRemoveButton, isEditable, onClickCheckbox,\n  } = props;\n  const [newTaskItemTitle, setNewTaskItemTitle] = useState('');\n\n  const onInputNewTaskItem = useCallback((evt) => {\n    setNewTaskItemTitle(evt.target.value);\n  }, []);\n\n  const onKeyEnterUp = useCallback(\n    (evt) => {\n      const KEY_ENTER = 13;\n      const { keyCode: keyUp = -1 } = evt;\n      const taksItemTitle = evt.target.value;\n      if (taksItemTitle.length !== 0 && keyUp === KEY_ENTER) {\n        onCreateNewTaskItem(\n          Map({\n            id: uniqueId(),\n            title: taksItemTitle,\n            checked: false,\n          }),\n        );\n        setNewTaskItemTitle('');\n      }\n    },\n    [setNewTaskItemTitle, onCreateNewTaskItem],\n  );\n\n  return (\n    <List>\n      <ListItem dense>\n        <Typography variant=\"h4\" gutterBottom>\n          {$task.get('title')}\n        </Typography>\n      </ListItem>\n      <TransitionGroup className=\"transition-fade\">\n        {$task.getIn(['items', 'refs']).map((taskItemId) => {\n          const $item = $task.getIn(['items', 'entity', taskItemId]);\n          return (\n            <CSSTransition key={$item.get('id')} timeout={300} classNames=\"ani-fade\">\n              <React.Fragment key={$item.get('id')}>\n                <ListItem>\n                  <IconButton onClick={() => onClickCheckbox($item)}>\n                    <Checkbox disabled={isEditable} edge=\"start\" checked={$item.get('checked')} />\n                  </IconButton>\n                  <ListItemText primary={$item.get('title')} />\n                  {isEditable ? (\n                    <IconButton onClick={() => onClickRemoveButton($item)}>\n                      <DeleteIcon />\n                    </IconButton>\n                  ) : null}\n                </ListItem>\n                <Divider variant=\"middle\" />\n              </React.Fragment>\n            </CSSTransition>\n          );\n        })}\n      </TransitionGroup>\n      {isEditable ? (\n        <ListItem>\n          <Input\n            value={newTaskItemTitle}\n            onKeyUp={onKeyEnterUp}\n            onChange={onInputNewTaskItem}\n            placeholder=\"新增待做事项\"\n            fullWidth\n          />\n        </ListItem>\n      ) : null}\n    </List>\n  );\n}\n\nTaskItemList.propTypes = {\n  $task: PropTypes.instanceOf(Map).isRequired,\n  onCreateNewTaskItem: PropTypes.func,\n  onClickRemoveButton: PropTypes.func,\n  isEditable: PropTypes.bool,\n  onClickCheckbox: PropTypes.func,\n};\n\nTaskItemList.defaultProps = {\n  onCreateNewTaskItem: () => {\n    /* eslint-disable */\n    console.log('onCreateNewTaskItem');\n  },\n  onClickRemoveButton: () => {\n    /* eslint-disable */\n    console.log('onCreateNewTaskItem');\n  },\n  onClickCheckbox: () => {\n    /* eslint-disable */\n    console.log('onClickCheckbox');\n  },\n  isEditable: false,\n};\n\nexport default TaskItemList;\n\n// export default TaskItemList;\n","import React, { useCallback, useEffect } from 'react';\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n// import { Redirect } from 'react-router-dom';\n// import { Map, List } from 'immutable';\nimport { Map } from 'immutable';\n\nimport TaskItemList from '../../components/TaskItemList';\nimport { taskActions } from '../../store/actions';\n\nfunction TodoListContainer(props) {\n  const {\n    match: {\n      params: { id: taskId },\n    },\n    $currentTodoTask,\n    dispatch,\n  } = props;\n\n  useEffect(() => {\n    dispatch(taskActions.changeCurrentTodoTaskById(taskId));\n  }, [taskId, dispatch]);\n\n  const toggleTaskItemPropChecked = useCallback(\n    ($taskItem) => {\n      dispatch(taskActions.toggleTaskItemPropChecked($taskItem));\n    },\n    [dispatch],\n  );\n\n  if ($currentTodoTask == null) return <div>404: NOT FOUND TASK</div>;\n\n  return (\n    <TaskItemList\n      onClickCheckbox={toggleTaskItemPropChecked}\n      $task={$currentTodoTask}\n      isEditable={false}\n    />\n  );\n}\n\nTodoListContainer.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n      action: PropTypes.string,\n    }),\n  }).isRequired,\n  // $tasks: PropTypes.instanceOf(List).isRequired,\n  // $tasksEntity: PropTypes.instanceOf(Map).isRequired,\n  $currentTodoTask: PropTypes.instanceOf(Map),\n  dispatch: PropTypes.func.isRequired,\n};\n\nTodoListContainer.defaultProps = {\n  $currentTodoTask: null,\n};\n\nconst mapState = ({ $global, $Task }) => ({\n  showSideMenu: $global.get('showSideMenu'),\n  $tasksEntity: $Task.getIn(['tasks', 'entity']),\n  $currentTodoTask: $Task.get('currentTodoTask'),\n});\n\nexport default connect(\n  mapState,\n  null,\n)(TodoListContainer);\n\n// export default TodoListContainer;\n","import React, { useMemo } from 'react';\nimport {\n  ListItem,\n  ListItemText,\n  Divider,\n  // Typography,\n} from '@material-ui/core';\nimport StarIcon from '@material-ui/icons/Star';\nimport IconButton from '@material-ui/core/IconButton';\nimport PropTypes from 'prop-types';\nimport { List as ImmutableList } from 'immutable';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport List from './List';\n\nimport { withStopEventtPropagation } from '../utils';\n\nfunction PinnedTaskList(props) {\n  const { onClickTask, $tasks, onClickIconButton } = props;\n\n  const onClickIconButtonWithStopEvtPropagation = useMemo(\n    () => withStopEventtPropagation(onClickIconButton),\n    [onClickIconButton],\n  );\n\n  return (\n    <List title=\"置顶任务\">\n      <Divider />\n      <TransitionGroup className=\"transition-fade\">\n        {$tasks.map($task => (\n          <CSSTransition key={$task.get('id')} timeout={600} classNames=\"ani-fade\">\n            <React.Fragment>\n              <ListItem onClick={() => onClickTask($task)} button>\n                <ListItemText primary={$task.get('title')} />\n                <IconButton onClick={evt => onClickIconButtonWithStopEvtPropagation(evt, $task)}>\n                  <StarIcon />\n                </IconButton>\n              </ListItem>\n            </React.Fragment>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </List>\n  );\n}\n\nPinnedTaskList.propTypes = {\n  $tasks: PropTypes.instanceOf(ImmutableList).isRequired,\n  onClickIconButton: PropTypes.func,\n  onClickTask: PropTypes.func,\n};\n\nPinnedTaskList.defaultProps = {\n  onClickTask: () => {\n    /*eslint-disable*/\n    console.log('onClickTask');\n  },\n  onClickIconButton: () => {\n    /*eslint-disable*/\n    console.log('onClickIconButton');\n  },\n};\n\nexport default PinnedTaskList;\n","import React, { useMemo } from 'react';\nimport {\n  ListItem,\n  ListItemText,\n  Divider,\n  // Typography,\n} from '@material-ui/core';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport IconButton from '@material-ui/core/IconButton';\nimport PropTypes from 'prop-types';\nimport { List as ImmutableList } from 'immutable';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport List from './List';\n\nimport { withStopEventtPropagation } from '../utils';\n\nfunction RecentTaskList(props) {\n  const { onClickTask, $tasks, onClickIconButton } = props;\n\n  const onClickIconButtonWithStopEvtPropagation = useMemo(\n    () => withStopEventtPropagation(onClickIconButton),\n    [onClickIconButton],\n  );\n\n  return (\n    <List title=\"最近任务\">\n      <Divider />\n      <TransitionGroup className=\"transition-fade\">\n        {$tasks.map($task => (\n          <CSSTransition key={$task.get('id')} timeout={300} classNames=\"ani-fade\">\n            <React.Fragment>\n              <ListItem onClick={() => onClickTask($task)} button>\n                <ListItemText primary={$task.get('title')} />\n                {$task.get('isPinned') ? null : (\n                  <IconButton\n                    onClick={evt => onClickIconButtonWithStopEvtPropagation(evt, $task)}\n                  >\n                    <StarBorderIcon />\n                  </IconButton>\n                )}\n              </ListItem>\n            </React.Fragment>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </List>\n  );\n}\n\nRecentTaskList.propTypes = {\n  $tasks: PropTypes.instanceOf(ImmutableList).isRequired,\n  onClickIconButton: PropTypes.func,\n  onClickTask: PropTypes.func,\n};\n\nRecentTaskList.defaultProps = {\n  onClickTask: () => {\n    /*eslint-disable*/\n    console.log('onClickTask');\n  },\n  onClickIconButton: () => {\n    /*eslint-disable*/\n    console.log('onClickIconButton');\n  },\n};\n\nexport default RecentTaskList;\n","import React, { useCallback, useMemo } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { List as ImmutableList, Map } from 'immutable';\nimport { connect } from 'react-redux';\n\nimport PinnedTaskList from '../components/PinnedTaskList';\n\nimport { taskActions } from '../store/actions';\nimport RecentTaskList from '../components/RecentTaskList';\n\nfunction HomeContainer(props) {\n  const {\n    $recentTaskIds, dispatch, history, $tasksEntity, $pinnedTaskIds,\n  } = props;\n\n  const $recentTasksWithIsPinnedProp = useMemo(\n    () => $recentTaskIds.map(taskId => $tasksEntity.get(taskId).set('isPinned', $pinnedTaskIds.includes(taskId))),\n    [$recentTaskIds, $tasksEntity, $pinnedTaskIds],\n  );\n\n  const $pinnedTasks = useMemo(() => $pinnedTaskIds.map(taskId => $tasksEntity.get(taskId)), [\n    $pinnedTaskIds,\n    $tasksEntity,\n  ]);\n\n  const pinOneTask = useCallback(\n    ($task) => {\n      const id = $task.get('id');\n      dispatch(taskActions.addTaskIdToPinnedTaskIds(id));\n    },\n    [dispatch],\n  );\n\n  const unpinOneTask = useCallback(\n    ($task) => {\n      dispatch(taskActions.removeTaskIdInPinnedTaskIds($task.get('id')));\n    },\n    [dispatch],\n  );\n\n  const onClickTask = useCallback(\n    ($task) => {\n      const id = $task.get('id');\n      dispatch(taskActions.addTaskIdToRecentTaskIds(id));\n      history.push(`/todo/${$task.get('id')}`);\n    },\n    [dispatch, history],\n  );\n\n  return (\n    <React.Fragment>\n      <PinnedTaskList\n        onClickIconButton={unpinOneTask}\n        onClickTask={onClickTask}\n        $tasks={$pinnedTasks}\n      />\n      <RecentTaskList\n        onClickIconButton={pinOneTask}\n        onClickTask={onClickTask}\n        $tasks={$recentTasksWithIsPinnedProp}\n      />\n    </React.Fragment>\n  );\n}\n\nHomeContainer.propTypes = {\n  $recentTaskIds: PropTypes.instanceOf(ImmutableList).isRequired,\n  $pinnedTaskIds: PropTypes.instanceOf(ImmutableList).isRequired,\n  $tasksEntity: PropTypes.instanceOf(Map).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nHomeContainer.defaultProps = {};\n\nconst mapState = ({ $Task }) => ({\n  $recentTaskIds: $Task.get('recentTaskIds'),\n  $pinnedTaskIds: $Task.get('pinnedTaskIds'),\n  $tasksEntity: $Task.getIn(['tasks', 'entity']),\n});\n\nexport default connect(\n  mapState,\n  null,\n)(HomeContainer);\n","import React, { useCallback, useReducer, useEffect } from 'react';\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\n// import { Map, List } from 'immutable';\nimport { Map } from 'immutable';\n\nimport TaskItemList from '../components/TaskItemList';\nimport { taskActions } from '../store/actions';\n\nconst actionTypes = {\n  ADD_TASK_ITEM_TO_TASK: 'ADD_TASK_ITEM_TO_TASK',\n  REMOVE_TASK_ITEM_IN_TASK: 'REMOVE_TASK_ITEM_IN_TASK',\n};\n\nfunction taskReducer($state, action) {\n  const $editingTask = $state;\n  const $editingTaskItems = $state.get('items');\n  const $editingTaskItemsEntity = $state.getIn(['items', 'entity']);\n  const $editingTaskItemsRefs = $state.getIn(['items', 'refs']);\n\n  switch (action.type) {\n    case actionTypes.ADD_TASK_ITEM_TO_TASK: {\n      const { payload: $taskItem } = action;\n      const id = $taskItem.get('id');\n      return $editingTask.set(\n        'items',\n        $editingTaskItems.merge({\n          entity: $editingTaskItemsEntity.set(id, $taskItem),\n          refs: $editingTaskItemsRefs.push(id),\n        }),\n      );\n    }\n    case actionTypes.REMOVE_TASK_ITEM_IN_TASK: {\n      const { payload: $taskItem } = action;\n      const targetId = $taskItem.get('id');\n      return $editingTask.set(\n        'items',\n        $editingTaskItems.merge({\n          entity: $editingTaskItemsEntity.delete(targetId),\n          refs: $editingTaskItemsRefs.filter(id => id !== targetId),\n        }),\n      );\n    }\n    default:\n      return $state;\n  }\n}\n\nfunction EditingTaskPageContainer(props) {\n  const {\n    match: {\n      params: { id: taskId },\n    },\n    dispatch,\n    $tasksEntity,\n  } = props;\n\n  const $targetTask = $tasksEntity.get(taskId);\n\n  const [$task, $taskDispatch] = useReducer(taskReducer, $targetTask);\n\n  useEffect(() => {\n    if ($task != null) dispatch(taskActions.updateTaskFromEdting($task));\n  }, [$task, dispatch]);\n\n  const onCreateNewTaskItem = useCallback(\n    ($newTaskItem) => {\n      $taskDispatch({\n        type: actionTypes.ADD_TASK_ITEM_TO_TASK,\n        payload: $newTaskItem,\n      });\n    },\n    [$taskDispatch],\n  );\n\n  const onClickRemoveButton = useCallback(\n    ($taskItem) => {\n      $taskDispatch({\n        type: actionTypes.REMOVE_TASK_ITEM_IN_TASK,\n        payload: $taskItem,\n      });\n    },\n    [$taskDispatch],\n  );\n\n  // const toggleTaskItemPropChecked = useCallback(() => {}, []);\n\n  if ($targetTask == null) return <Redirect to=\"/\" />;\n\n  return (\n    <TaskItemList\n      onCreateNewTaskItem={onCreateNewTaskItem}\n      onClickRemoveButton={onClickRemoveButton}\n      // onClickCheckbox={toggleTaskItemPropChecked}\n      $task={$task}\n      isEditable\n    />\n  );\n}\n\nEditingTaskPageContainer.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n      action: PropTypes.string,\n    }),\n  }).isRequired,\n  // $tasks: PropTypes.instanceOf(List).isRequired,\n  $tasksEntity: PropTypes.instanceOf(Map).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nEditingTaskPageContainer.defaultProps = {};\n\nconst mapState = ({ $global, $Task }) => ({\n  showSideMenu: $global.get('showSideMenu'),\n  $tasksEntity: $Task.getIn(['tasks', 'entity']),\n});\n\nexport default connect(\n  mapState,\n  null,\n)(EditingTaskPageContainer);\n\n// export default EditingTaskPageContainer;\n","import React from 'react';\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport { Switch, Route } from 'react-router-dom';\nimport AppBarContainer from '../../containers/AppBarContainer';\n\nimport SideMenuContainer from '../../containers/SideMenuContainer';\nimport TodoListContainer from '../../containers/TodoListContainer';\nimport HomeContainer from '../../containers/HomeContainer';\nimport EditingTaskPageContainer from '../../containers/EditingTaskPageContainer';\n\nfunction Index() {\n  return (\n    <div\n      style={{\n        position: 'relative',\n        height: '100vh',\n        display: 'flex',\n        flexFlow: 'column nowrap',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          flex: '1',\n          overflowY: 'scroll',\n          overflowX: 'hidden',\n        }}\n      >\n        <Switch>\n          <Route path=\"/todo/:id\" component={TodoListContainer} />\n          <Route path=\"/edit/:id\" component={EditingTaskPageContainer} />\n          <Route component={HomeContainer} />\n        </Switch>\n      </div>\n      <AppBarContainer />\n      <SideMenuContainer />\n    </div>\n  );\n}\n\n// Index.propTypes = {\n//   // dispatch: PropTypes.func.isRequired,\n//   // children: PropTypes.node,\n// };\n\n// Index.defaultProps = {\n//   // children: '',\n// };\n\nexport default Index;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport immutableTransform from 'redux-persist-transform-immutable';\nimport { createEpicMiddleware } from 'redux-observable';\n\n// import hardSet from 'redux-persist/lib/stateReconciler/hardSet';\n\nimport * as constants from './actionTypes';\nimport * as actions from './actions';\nimport reducers from './reducer';\nimport epics from './epics';\n\nimport { isDev } from '../env';\n\nconst epicMiddleware = createEpicMiddleware();\n\nconst middlewares = [epicMiddleware];\n\n// eslint-disable-next-line import/no-mutable-exports\nlet store;\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nif (isDev()) {\n  console.log('正处于develoment模式');\n  store = createStore(\n    reducers,\n    /* eslint-disable */\n    composeEnhancers(applyMiddleware(...middlewares)),\n  );\n} else {\n  const persistConfig = {\n    transforms: [immutableTransform()],\n    key: 'root',\n    storage,\n  };\n\n  const persistedReducer = persistReducer(persistConfig, reducers);\n\n  store = createStore(persistedReducer, applyMiddleware(...middlewares));\n}\n\nepicMiddleware.run(epics);\n\n// const store = createStore(persistedReducer);\nlet persistor;\nif (!isDev()) {\n  persistor = persistStore(store);\n}\nexport { persistor };\n\nexport { store, constants, actions };\n","/* eslint-disable */\nimport { fromJS, Map } from 'immutable';\n/* eslint-enable */\n\nimport * as actionTypes from './actionTypes';\n\n/**\n * @type Map<string, any>;\n */\nconst defaultState = fromJS({\n  showSideMenu: false,\n  path: '/',\n});\n\n/**\n *\n * @param {Map<string, any>} state\n * @param {{type: string, action?: any}} action\n */\nconst globalReducer = (state = defaultState, action) => {\n  const { type = null, payload = null } = action;\n  if (type == null) {\n    throw new Error(`action: ${action} does not has type!`);\n  }\n  switch (action.type) {\n    case actionTypes.SHOW_SIDE_MENU: {\n      return state.set('showSideMenu', true);\n    }\n    case actionTypes.HIDE_SIDE_MENU: {\n      return state.set('showSideMenu', false);\n    }\n    case actionTypes.CHANGE_CURRENT_PATH: {\n      const path = payload;\n      return state.set('path', path);\n    }\n    default:\n      return state;\n  }\n};\n\nexport default globalReducer;\n","/* eslint-disable */\nimport { fromJS, Map, List } from 'immutable';\n/* eslint-enable */\n\nimport * as actionTypes from './actionTypes';\nimport { uniqueId, normalize } from '../../utils';\n\n/**\n * @type Map<string, any>;\n */\nconst defaultState = fromJS({\n  tasks: normalize([\n    {\n      id: uniqueId(),\n      title: '创建一个任务',\n      items: normalize([\n        {\n          id: uniqueId(),\n          title: '创建任务: 在侧菜单栏中的输入框内按回车',\n          checked: false,\n        },\n        {\n          id: uniqueId(),\n          title: '编辑任务: 在侧菜单栏中打开编辑模式',\n          checked: false,\n        },\n        {\n          id: uniqueId(),\n          title: '添加任务项: 打开编辑模式后，点击编辑按钮',\n          checked: false,\n        },\n        {\n          id: uniqueId(),\n          title: '保存: 每次编辑后，程序会自动保存',\n          checked: false,\n        },\n        {\n          id: uniqueId(),\n          title: '开始一项任务: 在非编辑模式下点击任务即可',\n          checked: false,\n        },\n      ]),\n    },\n  ]),\n  recentTaskIds: [],\n  pinnedTaskIds: [],\n  currentTodoTask: null,\n});\n\n/**\n *\n * @param {Map<string, any>} state\n * @param {{type: string, action?: any}} action\n */\nconst TasksReducer = (state = defaultState, action) => {\n  const { type = null, payload = null } = action;\n  if (type == null) {\n    throw new Error('action: {action} does not has type!');\n  }\n  // 快捷访问方式\n  /** @type Map<String, any> */\n  const tasks = state.get('tasks');\n  /** @type Map<String, any> */\n  const tasksEntity = state.getIn(['tasks', 'entity']);\n  /** @type List<String> */\n  const tasksRefs = state.getIn(['tasks', 'refs']);\n\n  switch (action.type) {\n    case actionTypes.ADD_TASK_TO_TASKS: {\n      const { payload: newTask } = action;\n      const id = newTask.get('id');\n      return state.set(\n        'tasks',\n        tasks.merge({\n          entity: tasksEntity.set(id, newTask),\n          refs: tasksRefs.push(id),\n        }),\n      );\n    }\n    case actionTypes.REMOVE_TASK_IN_TASKS: {\n      const { payload: targetTask } = action;\n      const targetId = targetTask.get('id');\n      return state.set(\n        'tasks',\n        tasks.merge({\n          entity: tasksEntity.delete(targetId),\n          refs: tasksRefs.filter(id => id !== targetId),\n        }),\n      );\n    }\n    case actionTypes.CHANGE_CURRENT_TODO_TASK: {\n      const todoTask = payload;\n      return state.set('currentTodoTask', todoTask);\n    }\n    case actionTypes.CHANGE_CURRENT_TODO_TASK_BY_ID: {\n      const id = payload;\n      return state.set('currentTodoTask', state.getIn(['tasks', 'entity', id]));\n    }\n    case actionTypes.ADD_TASK_ID_TO_RECENT_TASK_IDS: {\n      const { payload: targetTaskId } = action;\n      const updatedrecentTasks = state\n        .get('recentTaskIds')\n        .filter(taskId => targetTaskId !== taskId) // remove self if exist\n        .unshift(targetTaskId);\n      return state.set('recentTaskIds', updatedrecentTasks);\n    }\n    case actionTypes.REMOVE_TASK_ID_IN_RECENT_TASK_IDS: {\n      const { payload: targetTaskId } = action;\n      const updatedrecentTasks = state\n        .get('recentTaskIds')\n        .filter(taskId => targetTaskId !== taskId); // remove self if exist\n      return state.set('recentTaskIds', updatedrecentTasks);\n    }\n    case actionTypes.ADD_TASK_ID_TO_PINNED_TASK_IDS: {\n      const { payload: targetTaskId } = action;\n      const updatedrecentTasks = state\n        .get('pinnedTaskIds')\n        .filter(taskId => targetTaskId !== taskId) // remove self if exist\n        .unshift(targetTaskId);\n      return state.set('pinnedTaskIds', updatedrecentTasks);\n    }\n    case actionTypes.REMOVE_TASK_ID_IN_PINNED_TASK_IDS: {\n      const { payload: targetTaskId } = action;\n      const updatedrecentTasks = state\n        .get('pinnedTaskIds')\n        .filter(taskId => targetTaskId !== taskId); // remove self if exist\n      return state.set('pinnedTaskIds', updatedrecentTasks);\n    }\n\n    // editing task item\n\n    case actionTypes.TOGGLE_TASK_ITEM_CHECKED: {\n      const taskItem = payload;\n      const propPath = ['currentTodoTask', 'items', 'entity', taskItem.get('id'), 'checked'];\n      return state.setIn(propPath, !state.getIn(propPath));\n    }\n\n    case actionTypes.CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_INDEX: {\n      const taskItemIndex = payload;\n      const targetTaskItemId = state.getIn(['currentTodoTask', 'items', 'refs', taskItemIndex]);\n      return state.setIn(['currentTodoTask', 'items', 'entity', targetTaskItemId, 'checked'], true);\n    }\n\n    case actionTypes.CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_TASK_ID: {\n      const taskId = payload;\n      return state.setIn(['currentTodoTask', 'items', 'entity', taskId, 'checked'], true);\n    }\n\n    case actionTypes.UPDARE_TASK_FROM_EDTING: {\n      const task = payload;\n      const id = task.get('id');\n      return state.setIn(['tasks', 'entity', id], task);\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default TasksReducer;\n","import { combineReducers } from 'redux';\n\nimport globalReducer from './global/reducer';\nimport tasksReducer from './tasks/reducer';\n\nconst reducers = combineReducers({\n  $global: globalReducer,\n  $Task: tasksReducer,\n});\n\n/* eslint-disable */\n\nexport default reducers;\n","// import { taskActionTypes, globalActionTypes } from './actionTypes';\n// import { combineEpics, ofType } from 'redux-observable';\nimport { combineEpics } from 'redux-observable';\n// import {} from 'react-router-dom';\n\n// import { Observable } from 'rxjs';\n// import {\n//   map, concatMap, tap, concat,\n// } from 'rxjs/operators';\n// import { globalActionTypes } from './actionTypes';\n// import { taskActions } from './actions';\n\n// /**\n//  * @param {Observable} action$\n//  */\n// export const taskEpic = (action$, state$) => {\n//   /** @type Observable */\n//   let history;\n//   let pathUrl;\n//   const changeCurTodoTask$ = action$.pipe(\n//     ofType(globalActionTypes.CHANGE_CURRENT_PATH),\n//     tap((action) => {\n//       const {\n//         sideEffect: { history: reactRouterHistory },\n//         path,\n//       } = action;\n//       history = reactRouterHistory;\n//       pathUrl = path;\n//     }),\n//     concatMap(({ sideEffect: { id, history } }) => taskActions.changeCurrentTodoTaskById(id)),\n//   );\n\n//   const afterChangeCurTodoTask$ = changeCurTodoTask$.pipe(map(() => action$));\n\n//   const ubsubAfterChangeCurTodoTask = afterChangeCurTodoTask$.subscribe({\n//     next() {\n//       // const {\n//       //   sideEffect: { history: reactRouterHistory },\n//       //   path,\n//       // } = action;\n//       // console.log('reactRouterHistory', reactRouterHistory);\n//       history.push(pathUrl);\n//     },\n//     complete() {\n//       ubsubAfterChangeCurTodoTask();\n//     },\n//   });\n\n//   return changeCurTodoTask$;\n// };\n\nexport default combineEpics();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport Index from './Layout/Index';\n// import TodoListContainer from './containers/TodoListContainer';\n\nimport { isDev } from './env';\n\nimport { store, persistor } from './store';\n\nfunction App() {\n  if (isDev) {\n    return (\n      <Provider store={store}>\n        <Router>\n          <Route path=\"/\" component={Index} />\n        </Router>\n      </Provider>\n    );\n  }\n  return (\n    <Provider store={store}>\n      <PersistGate persistor={persistor} loading={<div>loding...</div>}>\n        <Router>\n          <Route path=\"/\" component={Index} />\n        </Router>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport React from 'react';\n\nimport App from './App';\nimport './index.scss';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}