{"version":3,"sources":["utils/index.js","store/tasks/actionTypes.js","env.js","store/global/reducer.js","store/tasks/reducer.js","store/editingTask/reducer.js","store/user/reducer.js","store/reducer.js","utils/request.js","config.js","store/user/saga.js","store/effect/sagas.js","store/tasks/saga.js","store/editingTask/saga.js","store/global/sagas.js","store/rootSaga.js","store/index.js","containers/InitWrapperContainer.jsx","pages/AccountPage/index.jsx","components/NotFound.jsx","components/Checkbox.jsx","containers/TodoListContainer/index.jsx","containers/PinnedAndRecentTaskList/components/PinnedTaskList.jsx","containers/PinnedAndRecentTaskList/components/RecentTaskList.jsx","containers/PinnedAndRecentTaskList/index.jsx","containers/CompleteTaskButton.jsx","containers/TaskEditorButton.jsx","components/HomeButton.jsx","containers/AppBar/ui/StartTaskButton.jsx","containers/AppBar/index.jsx","containers/NotificationsPanelContainer/components/NotificationCard.jsx","containers/NotificationsPanelContainer/index.jsx","layouts/CommonLayout.jsx","containers/TaskEditor/components/TaskItemList.jsx","containers/TaskEditor/index.jsx","pages/HomePage/index.jsx","routes/RootRoutes.jsx","App.jsx","index.js","store/editingTask/actionTypes.js","store/user/actionTypes.js","store/global/actionTypes.js","utils/constants.js","store/tasks/actions.js","store/global/actions.js","store/editingTask/actions.js","store/effect/actions.js","store/user/actions.js","store/actions.js","store/effect/actionTypes.js","hooks/index.js"],"names":["__webpack_require__","d","__webpack_exports__","uniqueId","withStopEventtPropagation","stopEventPropagation","normalize","denormalize","getLocalJWT","setLocalJWT","count","timestamp","Date","now","toString","prefix","arguments","length","undefined","ramdomNumsStr","concat","String","Math","round","random","id","func","evt","stopPropagation","_len","args","Array","_key","apply","arr","name","key","result","entity","refs","forEach","oriObj","identityKey","push","obj","entityName","refsName","map","ref","localStorage","getItem","jwt","setItem","r","CHANGE_TASKS","ADD_TASK_TO_TASKS","REMOVE_TASK_IN_TASKS","CHANGE_CURRENT_TODO_TASK","CHANGE_CURRENT_TODO_TASK_BY_ID","CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_TASK_ID","TOGGLE_TASK_ITEM_CHECKED","UPDATE_TASK_IN_TASKS","EFFECT_GET_TASK_LIST","EFFECT_DELETE_TASK","EFFECT_GET_TASK","host","defaultState","fromJS","showSideMenu","showAccountManager","notifications","globalReducer","state","action","_action$type","type","_action$payload","payload","Error","actionTypes","set","rawInfo","get","shift","tasks","currentTodoTask","TasksReducer","tasksEntity","getIn","tasksRefs","tasksTobeChangedTo","newTask","merge","targetId","delete","filter","todoTask","propPath","setIn","taskId","task","userActionTypes","LOGOUT","clear","currentTask","futureTasks","oldTasks","editingTaskReducer","taskItems","taskItemsEntity","taskItemsRefs","$taskItem","tid","oldTask","last","pop","futureTask","hasLogin","userInfo","isLogining","isRegistering","userReducer","loginInfo","reducers","combineReducers","global","tasksReducer","editingTask","user","isDev","location","some","hs","includes","request","Axios","create","baseURL","timeout","interceptors","use","config","changedConfig","headers","Authorization","err","Promise","reject","response","errorResp","data","getUserInfo","login","register","_ref","regenerator_default","a","wrap","_context","prev","next","call","sent","put","userActions","loginSuccess","t0","console","error","stop","_marked","_ref2","loginResp","_loginResp$user","userInfoResp","token","rest","_context2","post","Object","objectWithoutProperties","objectSpread","globalActions","addOneNitification","title","loginFail","_marked2","_ref3","registerResp","_registerResp$user","_context3","registerSuccess","message","registerFail","_marked3","saga","takeEvery","EFFECT_GET_USERINFO","takeLatest","EFFECT_REGISTER","EFFECT_LOGIN","get$TaskById","updateTaskBy$task","rawTask","items","$task","abrupt","sagas_marked","_$task$toJS","updatedTask","updatedItems","updatedRest","$updatedTask","errorInfo","toJS","sagas_marked2","getTaskList","deleteTaskById","get$TaskThenChangeAndUpdate","rowTaskList","$tasks","taskActions","changeTasks","saga_marked","saga_marked2","_ref4","changeCurrentTodoTask","updateTaskInTasks","saga_marked3","tasks_saga","taskActionTypes","updateTaskThenSyncInTasks","get$TaskThenChange","editingTask_saga_marked","editingTaskActions","changeCurrentTask","editingTask_saga_marked2","editingTask_saga","editingTaskActionTypes","EFFECT_UPDATE_TASK","removeTheTopNotificationAfterWhile","ms","resolve","setTimeout","removeTheTopNitification","global_sagas_marked","sagas","globalActionTypes","ADD_ONE_NOTIFICATION","createTask","mySaga","taskResp","addTaskToTasks","rootSaga_marked","effectActionTypes","EFFECT_CREATE_TASK","all","toConsumableArray","userSagas","taskSagas","editingTaskSagas","globalSagas","rootSaga_marked2","store","sagaMiddleware","createSagaMiddleware","middlewares","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","log","createStore","applyMiddleware","run","rootSaga","InitWrapperContainer","props","children","dispatch","useDispatch","useEffect","effectGetUserInfo","react_default","createElement","Fragment","propTypes","PropTypes","node","isRequired","LazyAccountManagerContainer","React","lazy","e","then","bind","AccountPage","react","fallback","NotFound","time","_useState","useState","_useState2","slicedToArray","isTimeout","setIsTimeout","_useState3","_useState4","seconds","setSeconds","timeoutId","intervalId","setInterval","clearTimeout","clearInterval","react_router","to","style","padding","defaultProps","Checkbox","onClick","checked","disabled","ListItemOfTaskItemWithCheckbox","rawOnClick","useCallback","ListItem","button","components_Checkbox","edge","ListItemText","primary","TodoListContainer","match","params","history","$currentTodoTask","effectGetTask","_useMemo","useMemo","unfinished","finished","taskItemId","_useMemo2","unfinishedTaskItemRefs","finishedTaskItemRefs","toggleTaskItemPropChecked","jumpToEditingPage","components_NotFound","List","dense","Typography","variant","gutterBottom","IconButton","BorderColor_default","Divider","TransitionGroup","$item","Slide","direction","opacity","withRouter","connect","$state","$global","$tasksEntity","PinnedTaskList","onClickTask","onClickIconButton","onClickIconButtonWithStopEvtPropagation","subheader","ListSubheader","component","Fade","Star_default","RecentTaskList","StarBorder_default","PinnedAndRecentTaskList","$tasksRefs","$recentTasks","sort","$taskA","$taskB","taskATime","$pinnedTasks","pinOneTask","$pinndTask","effectUpdateTask","unpinOneTask","$unpinndTask","components_PinnedTaskList","components_RecentTaskList","$recentTaskIds","$pinnedTaskIds","CompleteTaskButton","buttonText","buttonColor","$tasksItemsEntity","$tasksItemsRefs","$unchckedTaskItems","numOfAllTaskItem","size","numOfCheckedItem","isAllComleted","hasZeroTaskItem","onClickCompleteButton","checkTaskItemInTaskItemsByTaskId","COLOR_RED","COLOR_GREEN","COLOR_ORANGE","Button","backgroundColor","color","transition","fullWidth","aria-label","Map","$editingTask","$futureTasks","$oldTasks","isUndoBtnDisabled","isRedoBtnDisabled","undoEditing","undoCurrentTask","redoEditing","redoCurrentTask","ButtonGroup","HomeButton","needDoubleClick","forceUpdate","useForceUpdate","clickCountRef","useRef","timerIdRef","doOnClick","current","clickCountSoFar","Home_default","StartTaskButton","COLOR_BLUE","AppBarContainer","useHistory","onClickMenuButton","onClickStartOneTaskButton","onClickHomeButton","AppBar","flex","position","Toolbar","Menu_default","className","path","TaskEditorButton","CompleteTaskButtonContainer","render","ui_StartTaskButton","components_HomeButton","SUCCESS","ERROR","TYPE_COLOR_MAPPING","_TYPE_COLOR_MAPPING","defineProperty","COLOR_YELLOW","NotificationCard","forwardRef","subtitle","iconStyle","borderRadius","overflow","width","height","icon","PriorityHigh_default","Clear_default","Done_default","Card","CardHeader","avatar","types","WARN","oneOf","objectOf","oneOfType","string","number","notificationsSelector","NotificationsPanelContainer","$notifications","useSelector","top","left","zIndex","boxSizing","_ref$detail","detail","_ref$type","Zoom","components_NotificationCard","marginTop","SideMenuContainer","CommonLayout","isShowSideMenu","hasSideMenuShowed","useHasBeenTrued","display","flexFlow","overflowY","overflowX","containers_AppBar","containers_NotificationsPanelContainer","TaskItemList","onCreateNewTaskItem","onClickRemoveButton","onClickEditButton","newTaskItemTitle","setNewTaskItemTitle","onInputNewTaskItem","target","value","onKeyEnterUp","_evt$keyCode","keyCode","keyUp","taksItemTitle","emitTaskId","DeleteForever_default","Input","onKeyUp","onChange","placeholder","onClickCheckbox","TaskEditor","$currentEditingTask","useParams","isTaskLoaded","setIsTaskLoaded","isTaskTaskChanged","setIsTaskTaskChanged","clearAllEdtingHistory","addNewTaskItem","$newTaskItem","snapshotCurrentTask","addTaskItemInCurrentTask","clearFutureTasks","removeTaskItem","removeTaskItemInCurrentTask","components_TaskItemList","isEditable","hasLoginSelector","HomePage","effectGetTaskList","layouts_CommonLayout","RootRoutes","App","es","containers_InitWrapperContainer","react_router_dom","routes_RootRoutes","ReactDOM","document","getElementById","CHANGE_CURRENT_TASK","ADD_TASK_ITEM_IN_CURRENT_TASK","REMOVE_TASK_ITEM_IN_CURRENT_TASK","SNAPSHOT_CURRENT_TASK","UNDO_CURRENT_TASK","REDO_CURRENT_TASK","CLEAR_FUTURE_TASKS","CLEAR_EDITNG_HISTORY","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","SHOW_SIDE_MENU","HIDE_SIDE_MENU","REMOVE_THE_TOP_NOTIFICATION","removeTaskInTasks","changeCurrentTodoTaskById","effectDeleteTask","hideSideMenu","info","updateTask","$loginInfo","logout","$registerInfo","effectLogin","effectRegister","actions_showSideMenu","actions_hideSideMenu","actions_namespaceObject","global_actions_namespaceObject","editingTask_actions_namespaceObject","user_actions_namespaceObject","effect_actions_namespaceObject","useIsOnline","navigator","onLine","_mnt_e_docs_gitcodes_monica_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isOnline","setIsOnline","onlineListener","offlineListener","addEventListener","removeEventListener","status","initialStausRef","setUpdateCount","prevCount"],"mappings":"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","file":"static/js/main.25677fee.chunk.js","sourcesContent":["// import { isDev } from '../env';\n\nexport const uniqueId = (function saveNextId() {\n  let count = -1;\n  const timestamp = Date.now().toString();\n  return function generatorOfUniqueId(prefix = '') {\n    count += 1;\n    const ramdomNumsStr = `${String(Math.round(Math.random() * 100000000))}-${String(Math.round(Math.random() * 100000000))}`;\n    const id = `${ramdomNumsStr}-${timestamp}-${count}`;\n    if (prefix.length === 0) return id;\n    return `${prefix}-${id}`;\n  };\n}());\n\n// export function deepCopy(obj) {\n//   return JSON.parse(JSON.stringify(obj));\n// }\n\nexport function withStopEventtPropagation(func) {\n  return (evt, ...args) => {\n    evt.stopPropagation();\n    return func(...args);\n  };\n}\n\nexport function stopEventPropagation(evt) {\n  evt.stopPropagation();\n}\n\n/**\n *\n * @param {Array} arr\n * @param {String} name\n * @param {String} key\n */\nexport function normalize(arr, name = 'entity', key = 'id') {\n  const result = {};\n  const entity = {};\n  const refs = [];\n  const refsName = 'refs';\n  result[name] = entity;\n  result[refsName] = refs;\n  arr.forEach((oriObj) => {\n    const identityKey = oriObj[key];\n    refs.push(identityKey);\n    entity[identityKey] = oriObj;\n  });\n  return result;\n}\n\nexport function denormalize(obj, entityName = 'entity', refsName = 'refs') {\n  const result = obj[refsName].map((ref) => obj[entityName][ref]);\n  return result;\n}\n\nexport function getLocalJWT() {\n  return localStorage.getItem('__jwt') || '';\n}\n\nexport function setLocalJWT(jwt) {\n  localStorage.setItem('__jwt', jwt);\n}\n// window.getLocalJWT = getLocalJWT;\n// window.setLocalJWT = setLocalJWT;\n","/* eslint-disable operator-linebreak */\n\nexport const CHANGE_TASKS = 'tasks/CHANGE_TASKS';\n\nexport const ADD_TASK_TO_TASKS = 'tasks/ADD_TASK_TO_TASKS';\n\nexport const REMOVE_TASK_IN_TASKS = 'tasks/REMOVE_TASK_IN_TASKS';\n\nexport const CHANGE_CURRENT_TODO_TASK = 'tasks/CHANGE_CURRENT_TODO_TASK';\n\nexport const CHANGE_CURRENT_TODO_TASK_BY_ID =\n  'tasks/CHANGE_CURRENT_TODO_TASK_BY_ID';\n\n// -- task item\n\n// export const CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_INDEX =\n//   'tasks/CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_INDEX';\n\nexport const CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_TASK_ID =\n  'tasks/CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_TASK_ID';\n\nexport const TOGGLE_TASK_ITEM_CHECKED = 'tasks/TOGGLE_TASK_ITEM_CHECKED';\n\n// editing task\n\n// export const UPDARE_TASK_FROM_EDTING = 'tasks/UPDARE_TASK_FROM_EDTING';\n\nexport const UPDATE_TASK_IN_TASKS = 'tasks/UPDATE_TASK_IN_TASKS';\n\n// effect\n\nexport const EFFECT_GET_TASK_LIST = 'tasks/EFFECT_GET_TASK_LIST';\n\nexport const EFFECT_DELETE_TASK = 'tasks/EFFECT_DELETE_TASK';\n\nexport const EFFECT_GET_TASK = 'tasks/EFFECT_GET_TASK';\n\n// export const EFFECT_UPDATE_TASK = 'tasks/EFFECT_UPDATE_TASK';\n","/**\n * @param {String} host\n */\nconst createIsDev = host => () => {\n  const hosts = ['localhost', '127.0.0.1'];\n  return hosts.some(hs => host.includes(hs));\n};\n\n// eslint-disable-next-line no-restricted-globals\nexport const isDev = createIsDev(location.host);\n// export const isDev = () => false;\nexport const foo = 'nothing';\n","/* eslint-disable */\nimport { fromJS, Map } from 'immutable';\n/* eslint-enable */\n\nimport * as actionTypes from './actionTypes';\n\n/**\n * @type Map<string, any>;\n */\nconst defaultState = fromJS({\n  showSideMenu: false,\n  showAccountManager: false,\n  notifications: [], // 存储原生js的对象，非immutable\n});\n\n/**\n *\n * @param {Map<string, any>} state\n * @param {{type: string, action?: any}} action\n */\nconst globalReducer = (state = defaultState, action) => {\n  const { type = null, payload = null } = action;\n  // const { type = null } = action;\n  if (type == null) {\n    throw new Error(`action: ${action} does not has type!`);\n  }\n  switch (action.type) {\n    case actionTypes.SHOW_SIDE_MENU: {\n      return state.set('showSideMenu', true);\n    }\n    case actionTypes.HIDE_SIDE_MENU: {\n      return state.set('showSideMenu', false);\n    }\n    case actionTypes.ADD_ONE_NOTIFICATION: {\n      const rawInfo = payload;\n      return state.set('notifications', state.get('notifications').push(rawInfo));\n    }\n    case actionTypes.REMOVE_THE_TOP_NOTIFICATION: {\n      return state.set('notifications', state.get('notifications').shift());\n    }\n    default:\n      return state;\n  }\n};\n\nexport default globalReducer;\n","/* eslint-disable */\nimport { fromJS, Map, List } from 'immutable';\n/* eslint-enable */\n\nimport * as actionTypes from './actionTypes';\nimport { normalize } from '../../utils';\nimport { userActionTypes } from '../actionTypes';\n\n/**\n * @type Map<string, any>;\n */\nconst defaultState = fromJS({\n  tasks: normalize([]),\n  currentTodoTask: null,\n});\n\n/**\n *\n * @param {Map<string, any>} state\n * @param {{type: string, action?: any}} action\n */\nconst TasksReducer = (state = defaultState, action) => {\n  const { type = null, payload = null } = action;\n  if (type == null) {\n    throw new Error('action: {action} does not has type!');\n  }\n  // 快捷访问方式\n  /** @type Map<String, any> */\n  const tasks = state.get('tasks');\n  /** @type Map<String, any> */\n  const tasksEntity = state.getIn(['tasks', 'entity']);\n  /** @type List<String> */\n  const tasksRefs = state.getIn(['tasks', 'refs']);\n\n  switch (action.type) {\n    case actionTypes.CHANGE_TASKS: {\n      const tasksTobeChangedTo = payload;\n      return state.set('tasks', tasksTobeChangedTo);\n    }\n    case actionTypes.ADD_TASK_TO_TASKS: {\n      const { payload: newTask } = action;\n      const id = newTask.get('id');\n      return state.set(\n        'tasks',\n        tasks.merge({\n          entity: tasksEntity.set(id, newTask),\n          refs: tasksRefs.push(id),\n        }),\n      );\n    }\n    case actionTypes.REMOVE_TASK_IN_TASKS: {\n      const targetTask = payload;\n      const targetId = targetTask.get('id');\n      return state.set(\n        'tasks',\n        tasks.merge({\n          entity: tasksEntity.delete(targetId),\n          refs: tasksRefs.filter((id) => id !== targetId),\n        }),\n      );\n    }\n    case actionTypes.CHANGE_CURRENT_TODO_TASK: {\n      const todoTask = payload;\n      return state.set('currentTodoTask', todoTask);\n    }\n    case actionTypes.CHANGE_CURRENT_TODO_TASK_BY_ID: {\n      const id = payload;\n      return state.set('currentTodoTask', state.getIn(['tasks', 'entity', id]));\n    }\n\n    // editing task item\n\n    case actionTypes.TOGGLE_TASK_ITEM_CHECKED: {\n      const taskItem = payload;\n      const propPath = [\n        'currentTodoTask',\n        'items',\n        'entity',\n        taskItem.get('id'),\n        'checked',\n      ];\n      return state.setIn(propPath, !state.getIn(propPath));\n    }\n\n    // case actionTypes.CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_INDEX: {\n    //   const taskItemIndex = payload;\n    //   const targetTaskItemId = state.getIn([\n    //     'currentTodoTask',\n    //     'items',\n    //     'refs',\n    //     taskItemIndex,\n    //   ]);\n    //   return state.setIn(\n    //     ['currentTodoTask', 'items', 'entity', targetTaskItemId, 'checked'],\n    //     true,\n    //   );\n    // }\n\n    case actionTypes.CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_TASK_ID: {\n      const taskId = payload;\n      return state.setIn(\n        ['currentTodoTask', 'items', 'entity', taskId, 'checked'],\n        true,\n      );\n    }\n\n    // case actionTypes.UPDARE_TASK_FROM_EDTING: {\n    //   const task = payload;\n    //   const id = task.get('id');\n    //   return state.setIn(['tasks', 'entity', id], task);\n    // }\n    case actionTypes.UPDATE_TASK_IN_TASKS: {\n      const task = payload;\n      const id = task.get('id');\n      return state.setIn(['tasks', 'entity', id], task);\n    }\n\n    // user\n\n    case userActionTypes.LOGOUT: {\n      return state.set('tasks', state.get('tasks').merge({\n        entity: tasksEntity.clear(),\n        refs: tasksRefs.clear(),\n      }));\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default TasksReducer;\n","/* eslint-disable arrow-parens */\n/* eslint-disable */\nimport { fromJS, Map, List } from 'immutable';\n/* eslint-enable */\n\nimport * as actionTypes from './actionTypes';\n\n/**\n * @type Map<string, any>;\n */\nconst defaultState = fromJS({\n  currentTask: null,\n  futureTasks: [],\n  oldTasks: [],\n});\n\n/**\n *\n * @param {Map<string, any>} state\n * @param {{type: string, action?: any}} action\n */\nconst editingTaskReducer = (state = defaultState, action) => {\n  const { type = null, payload = null } = action;\n  if (type == null) {\n    throw new Error('action: {action} does not has type!');\n  }\n\n  const taskItems = state.getIn(['currentTask', 'items']);\n  const taskItemsEntity = state.getIn(['currentTask', 'items', 'entity']);\n  const taskItemsRefs = state.getIn(['currentTask', 'items', 'refs']);\n\n  switch (action.type) {\n    case actionTypes.CHANGE_CURRENT_TASK: {\n      const task = payload;\n      return state.set('currentTask', task);\n    }\n    case actionTypes.ADD_TASK_ITEM_IN_CURRENT_TASK: {\n      const $taskItem = payload;\n      const id = $taskItem.get('id');\n      return state.setIn(\n        ['currentTask', 'items'],\n        taskItems.merge({\n          entity: taskItemsEntity.set(id, $taskItem),\n          refs: taskItemsRefs.push(id),\n        }),\n      );\n    }\n    case actionTypes.REMOVE_TASK_ITEM_IN_CURRENT_TASK: {\n      const $taskItem = payload;\n      const id = $taskItem.get('id');\n      return state.setIn(\n        ['currentTask', 'items'],\n        taskItems.merge({\n          entity: taskItemsEntity.delete(id),\n          refs: taskItemsRefs.filter((tid) => tid !== id),\n        }),\n      );\n    }\n    case actionTypes.UNDO_CURRENT_TASK: {\n      const oldTasks = state.get('oldTasks');\n      if (oldTasks.length !== 0) {\n        const futureTasks = state.get('futureTasks');\n        const currentTask = state.get('currentTask');\n        const oldTask = oldTasks.last();\n        return state.merge({\n          currentTask: oldTask,\n          futureTasks: futureTasks.push(currentTask),\n          oldTasks: oldTasks.pop(),\n        });\n      }\n      return state;\n    }\n    case actionTypes.REDO_CURRENT_TASK: {\n      const futureTasks = state.get('futureTasks');\n      if (futureTasks.length !== 0) {\n        const oldTasks = state.get('oldTasks');\n        const currentTask = state.get('currentTask');\n        const futureTask = futureTasks.last();\n        return state.merge({\n          currentTask: futureTask,\n          futureTasks: futureTasks.pop(),\n          oldTasks: oldTasks.push(currentTask),\n        });\n      }\n      return state;\n    }\n    case actionTypes.SNAPSHOT_CURRENT_TASK: {\n      const currentTask = state.get('currentTask');\n      if (currentTask != null) {\n        const oldTasks = state.get('oldTasks');\n        return state.set('oldTasks', oldTasks.push(currentTask));\n      }\n      return state;\n    }\n    case actionTypes.CLEAR_FUTURE_TASKS: {\n      return state.set('futureTasks', state.get('futureTasks').clear());\n    }\n    case actionTypes.CLEAR_EDITNG_HISTORY: {\n      return state.merge({\n        futureTasks: state.get('futureTasks').clear(),\n        oldTasks: state.get('oldTasks').clear(),\n      });\n    }\n    default:\n      return state;\n  }\n};\n\nexport default editingTaskReducer;\n","/* eslint-disable */\nimport { fromJS, Map } from 'immutable';\n/* eslint-enable */\n\nimport * as actionTypes from './actionTypes';\nimport { setLocalJWT } from '../../utils';\n\n/**\n * @type Map<string, any>;\n */\nconst defaultState = fromJS({\n  hasLogin: false,\n  userInfo: null,\n  isLogining: false,\n  isRegistering: false,\n});\n\n/**\n *\n * @param {Map<string, any>} state\n * @param {{type: string, action?: any}} action\n */\nconst userReducer = (state = defaultState, action) => {\n  const { type = null, payload = null } = action;\n  if (type == null) {\n    throw new Error(`action: ${action} does not has type!`);\n  }\n  switch (action.type) {\n    case actionTypes.EFFECT_LOGIN: {\n      return state.set('isLogining', true);\n    }\n    case actionTypes.EFFECT_REGISTER: {\n      return state.set('isRegistering', true);\n    }\n    case actionTypes.LOGIN_SUCCESS: {\n      const loginInfo = payload;\n      return state.merge({ hasLogin: true, isLogining: false }, loginInfo);\n    }\n    case actionTypes.LOGIN_FAIL: {\n      return state.set('isLogining', false);\n    }\n    case actionTypes.LOGOUT: {\n      setLocalJWT(''); // 清空本地jwt\n      return state.merge({\n        hasLogin: false,\n        userInfo: null,\n        isLogining: false,\n        isRegistering: false,\n      });\n    }\n    case actionTypes.REGISTER_SUCCESS: {\n      const loginInfo = payload;\n      return state.merge({ hasLogin: true, isRegistering: false }, loginInfo);\n    }\n    case actionTypes.REGISTER_FAIL: {\n      return state.set('isRegistering', false);\n    }\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from 'redux-immutable';\n\nimport globalReducer from './global/reducer';\nimport tasksReducer from './tasks/reducer';\nimport editingTaskReducer from './editingTask/reducer';\nimport userReducer from './user/reducer';\n\n\nconst reducers = combineReducers({\n  global: globalReducer,\n  task: tasksReducer,\n  editingTask: editingTaskReducer,\n  user: userReducer,\n});\n\n/* eslint-disable */\n\nexport default reducers;\n","import Axios from 'axios';\nimport { getRemoteHostUrl } from '../config';\nimport { getLocalJWT, uniqueId } from '.';\n\nexport const request = Axios.create({\n  baseURL: getRemoteHostUrl(),\n  timeout: 1000,\n});\n\nexport const foo = ';';\n\nrequest.interceptors.request.use(\n  (config) => {\n    const jwt = getLocalJWT();\n    if (jwt === '' || jwt == null) return config;\n    const changedConfig = config;\n    changedConfig.headers.Authorization = `Bearer ${jwt}`;\n    return changedConfig;\n  },\n  (err) => Promise.reject(err),\n);\n\nrequest.interceptors.response.use(\n  (config) => config,\n  (err) => {\n    const { data: errorResp } = err.response;\n    errorResp.type = 'error';\n    errorResp.key = uniqueId('error');\n    return Promise.reject(errorResp);\n  },\n);\n","/* eslint-disable import/prefer-default-export */\nimport { isDev } from './env';\n\nexport function getRemoteHostUrl() {\n  if (isDev()) return 'http://localhost:3031/';\n  return 'http://101.37.174.138/';\n}\n","import {\n  call, put, takeEvery, takeLatest,\n} from 'redux-saga/effects';\nimport { fromJS } from 'immutable';\nimport { userActionTypes } from '../actionTypes';\nimport { request } from '../../utils/request';\nimport { setLocalJWT, uniqueId } from '../../utils';\nimport { userActions, globalActions } from '../actions';\n\nfunction* getUserInfo() {\n  try {\n    const { data: userInfo } = yield call(request.get, '/users');\n    yield put(userActions.loginSuccess({\n      userInfo: fromJS(userInfo),\n    }));\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error('登录失败', err);\n    setLocalJWT('');\n  }\n}\n\nfunction* login(action) {\n  try {\n    const { payload: userInfo } = action;\n    const { data: loginResp } = yield call(\n      request.post,\n      '/users/login',\n      userInfo,\n    );\n    const { user: userInfoResp = null, token, ...rest } = loginResp;\n    setLocalJWT(token);\n    yield put(\n      userActions.loginSuccess(\n        fromJS({\n          token,\n          userInfo: userInfoResp,\n          ...rest,\n        }),\n      ),\n    );\n    yield put(globalActions.addOneNitification({\n      type: 'success',\n      title: '登陆成功',\n      key: uniqueId('notifi'),\n    }));\n  } catch (errResp) {\n    yield put(userActions.loginFail());\n    yield put(globalActions.addOneNitification(errResp));\n  }\n}\n\nfunction* register(action) {\n  try {\n    const { payload: userInfo } = action;\n    const { data: registerResp } = yield call(request.post, '/users', userInfo);\n    const { user: userInfoResp = null, token, ...rest } = registerResp;\n    setLocalJWT(token);\n    yield put(\n      userActions.registerSuccess(\n        fromJS({\n          token,\n          userInfo: userInfoResp,\n          ...rest,\n        }),\n      ),\n    );\n    yield put(globalActions.addOneNitification({\n      type: 'success',\n      title: '注册成功',\n      message: '已经为您自动登录应用',\n    }));\n  } catch (errResp) {\n    yield put(userActions.registerFail());\n    yield put(globalActions.addOneNitification(errResp));\n  }\n}\n\nexport default [\n  takeEvery(userActionTypes.EFFECT_GET_USERINFO, getUserInfo),\n  takeLatest(userActionTypes.EFFECT_REGISTER, register),\n  takeLatest(userActionTypes.EFFECT_LOGIN, login),\n];\n","// 在这里抽离出公共的saga函数\nimport { fromJS } from 'immutable';\n\nimport { call, put } from 'redux-saga/effects';\nimport { request } from '../../utils/request';\n\nimport { normalize, denormalize } from '../../utils';\nimport { globalActions } from '../actions';\n\nexport function* get$TaskById(taskId) {\n  try {\n    const { data: rawTask } = yield call(request.get, `/tasks/${taskId}`);\n    const { items, ...rest } = rawTask;\n    const $task = fromJS({\n      ...rest,\n      items: normalize(items),\n    });\n    return $task;\n  } catch (errResp) {\n    yield put(globalActions.addOneNitification(errResp));\n    return null;\n  }\n}\n\nexport function* updateTaskBy$task($task) {\n  try {\n    const { items, ...rest } = $task.toJS();\n    const task = {\n      ...rest,\n      items: denormalize(items),\n      timestamp: Date.now(),\n    };\n    const { data: updatedTask } = yield call(\n      request.put,\n      `/tasks/${task.id}`,\n      task,\n    );\n    const { items: updatedItems, ...updatedRest } = updatedTask;\n    const $updatedTask = fromJS({\n      ...updatedRest,\n      items: normalize(updatedItems),\n    });\n\n    return $updatedTask;\n  } catch (errResp) {\n    const { data: errorInfo } = errResp;\n    errorInfo.type = 'error';\n    errorInfo.title = '编辑任务失败';\n    yield put(globalActions.addOneNitification(errorInfo));\n    return null;\n  }\n}\n\nexport const foo = ' foo';\n","import { call, put, takeEvery } from 'redux-saga/effects';\nimport { fromJS } from 'immutable';\nimport { request } from '../../utils/request';\nimport { normalize } from '../../utils';\nimport { taskActions } from '../actions';\nimport { taskActionTypes } from '../actionTypes';\nimport { get$TaskById } from '../effect/sagas';\n\nfunction* getTaskList() {\n  try {\n    const { data: rowTaskList } = yield call(request.get, '/tasks');\n    const $tasks = fromJS(\n      normalize(\n        rowTaskList.map(({ items, ...rest }) => ({\n          ...rest,\n          items: fromJS(normalize(items)),\n        })),\n      ),\n    );\n    yield put(taskActions.changeTasks($tasks));\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n  }\n}\n\nfunction* deleteTaskById({ payload: taskId }) {\n  try {\n    yield call(request.delete, `/tasks/${taskId}`);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n  }\n}\n\nfunction* get$TaskThenChangeAndUpdate({ payload: taskId }) {\n  const $task = yield call(get$TaskById, taskId);\n  if ($task == null) return;\n  yield put(taskActions.changeCurrentTodoTask($task));\n  yield put(taskActions.updateTaskInTasks($task));\n}\n\n\nexport default [\n  takeEvery(taskActionTypes.EFFECT_GET_TASK_LIST, getTaskList),\n  takeEvery(taskActionTypes.EFFECT_DELETE_TASK, deleteTaskById),\n  takeEvery(taskActionTypes.EFFECT_GET_TASK, get$TaskThenChangeAndUpdate),\n];\n","import { call, takeEvery, put } from 'redux-saga/effects';\n\nimport { editingTaskActionTypes } from '../actionTypes';\nimport { taskActions, editingTaskActions } from '../actions';\nimport { get$TaskById, updateTaskBy$task } from '../effect/sagas';\n\nfunction* updateTaskThenSyncInTasks({ payload: $task }) {\n  const $updatedTask = yield call(updateTaskBy$task, $task);\n  if ($updatedTask == null) return;\n  yield put(taskActions.updateTaskInTasks($updatedTask));\n}\n\nfunction* get$TaskThenChange({ payload: taskId }) {\n  const $task = yield call(get$TaskById, taskId);\n  if ($task == null) return;\n  yield put(editingTaskActions.changeCurrentTask($task));\n}\n\nexport default [\n  takeEvery(editingTaskActionTypes.EFFECT_UPDATE_TASK, updateTaskThenSyncInTasks),\n  takeEvery(editingTaskActionTypes.EFFECT_GET_TASK, get$TaskThenChange),\n];\n","import {\n  call, put, takeEvery,\n} from 'redux-saga/effects';\nimport { globalActionTypes } from '../actionTypes';\nimport { globalActions } from '../actions';\n\nconst timeout = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction* removeTheTopNotificationAfterWhile() {\n  yield call(timeout, 3000);\n  yield put(globalActions.removeTheTopNitification());\n}\n\nexport default [\n  takeEvery(\n    globalActionTypes.ADD_ONE_NOTIFICATION,\n    removeTheTopNotificationAfterWhile,\n  ),\n];\n","import {\n  call, put, takeEvery, all,\n} from 'redux-saga/effects';\nimport { fromJS } from 'immutable';\n\nimport { effectActionTypes } from './actionTypes';\nimport { request } from '../utils/request';\nimport { taskActions, globalActions } from './actions';\nimport { normalize } from '../utils';\n\nimport userSagas from './user/saga';\nimport taskSagas from './tasks/saga';\nimport editingTaskSagas from './editingTask/saga';\nimport globalSagas from './global/sagas';\n\nfunction* createTask(action) {\n  try {\n    const { payload: task } = action;\n    const { data: taskResp } = yield call(request.post, '/tasks', task);\n    const { items } = taskResp;\n    yield put(\n      taskActions.addTaskToTasks(\n        fromJS({\n          ...taskResp,\n          items: normalize(items),\n        }),\n      ),\n    );\n  } catch (errResp) {\n    // eslint-disable-next-line no-console\n    console.error('createTask', errResp);\n    yield put(globalActions.addOneNitification(errResp));\n  }\n}\n\nfunction* mySaga() {\n  // yield takeLatest(effectActionTypes.EFFECT_REGISTER, register);\n  // yield takeLatest(effectActionTypes.EFFECT_LOGIN, login);\n\n  // tasks\n\n  yield takeEvery(effectActionTypes.EFFECT_CREATE_TASK, createTask);\n\n  yield all([\n    ...userSagas,\n    ...taskSagas,\n    ...editingTaskSagas,\n    ...globalSagas,\n  ]);\n}\n\nexport default mySaga;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\n\nimport * as constants from './actionTypes';\nimport * as actions from './actions';\nimport reducers from './reducer';\n\nimport rootSaga from './rootSaga';\n\nimport { isDev } from '../env';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\n// eslint-disable-next-line import/no-mutable-exports\nlet store;\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nif (isDev()) {\n  // eslint-disable-next-line no-console\n  console.log('正处于develoment模式');\n  store = createStore(\n    reducers,\n    /* eslint-disable */\n    composeEnhancers(applyMiddleware(...middlewares)),\n  );\n} else {\n  store = createStore(reducers, applyMiddleware(...middlewares));\n}\n\nsagaMiddleware.run(rootSaga)\n\n// const store = createStore(persistedReducer);\n\nexport { store, constants, actions };\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getLocalJWT } from '../utils';\nimport { userActions } from '../store/actions';\n\nfunction InitWrapperContainer(props) {\n  const { children } = props;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // 自动登录\n    const jwt = getLocalJWT();\n    if (jwt === '' || jwt == null) return;\n    dispatch(userActions.effectGetUserInfo());\n  }, [dispatch]);\n\n\n  return <>{children}</>;\n}\n\nInitWrapperContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default InitWrapperContainer;\n","import React, { Suspense } from 'react';\n// import { useSelector } from 'react-redux';\n// import { useHasBeenTrued } from '../../hooks';\n\nconst LazyAccountManagerContainer = React.lazy(() => import('../../containers/AccountManagerContainer'));\n\n\nexport default function AccountPage() {\n  return (\n    <Suspense fallback={null}>\n      <LazyAccountManagerContainer />\n    </Suspense>\n\n  );\n}\n","/* eslint-disable arrow-parens */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\n\nfunction NotFound(props) {\n  const { message, time } = props;\n  const [isTimeout, setIsTimeout] = useState(false);\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setIsTimeout(true);\n    }, time);\n\n    const intervalId = setInterval(() => {\n      setSeconds((prev) => prev + 1);\n    }, 1000);\n\n    return () => {\n      clearTimeout(timeoutId);\n      clearInterval(intervalId);\n    };\n  }, [time, setIsTimeout, setSeconds]);\n\n  return isTimeout ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <div\n      style={{\n        padding: '20px',\n      }}\n    >\n      <h1>{message}</h1>\n      <h2>\n        {Math.round(time / 1000) - seconds}\n        秒后回到主页\n      </h2>\n    </div>\n  );\n}\n\nNotFound.propTypes = {\n  message: PropTypes.string,\n  time: PropTypes.number,\n};\n\nNotFound.defaultProps = {\n  message: '404 Not Found',\n  time: 3000,\n};\nexport default NotFound;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MaterialCheckbox from '@material-ui/core/Checkbox';\n\nfunction Checkbox(props) {\n  return <MaterialCheckbox {...props} />;\n}\n\nCheckbox.propTypes = {\n  onClick: PropTypes.func,\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n};\n\nCheckbox.defaultProps = {\n  onClick: null,\n  checked: false,\n  disabled: false,\n};\n\nexport default Checkbox;\n","import React, { useCallback, useEffect, useMemo } from 'react';\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n// import { Map, List } from 'immutable';\nimport { Map } from 'immutable';\nimport EditIcon from '@material-ui/icons/BorderColor';\nimport {\n  List, ListItemText, IconButton, ListItem, Divider, Typography,\n} from '@material-ui/core';\nimport Slide from '@material-ui/core/Slide';\nimport { TransitionGroup } from 'react-transition-group';\nimport NotFound from '../../components/NotFound';\nimport { taskActions } from '../../store/actions';\nimport Checkbox from '../../components/Checkbox';\n\nfunction ListItemOfTaskItemWithCheckbox(props) {\n  const { $taskItem, onClick: rawOnClick, style } = props;\n\n  const onClick = useCallback(() => rawOnClick($taskItem), [$taskItem, rawOnClick]);\n\n  return (\n    <ListItem style={style} button onClick={onClick}>\n      <Checkbox edge=\"start\" checked={$taskItem.get('checked')} />\n      <ListItemText primary={$taskItem.get('title')} />\n    </ListItem>\n  );\n}\n\nListItemOfTaskItemWithCheckbox.propTypes = {\n  $taskItem: PropTypes.instanceOf(Map).isRequired,\n  onClick: PropTypes.func.isRequired,\n  style: PropTypes.objectOf(PropTypes.string),\n};\n\nListItemOfTaskItemWithCheckbox.defaultProps = {\n  style: null,\n};\n\nfunction TodoListContainer(props) {\n  const {\n    match: {\n      params: { id: taskId },\n    },\n    history,\n    $currentTodoTask,\n    dispatch,\n  } = props;\n\n  useEffect(() => {\n    dispatch(taskActions.effectGetTask(taskId));\n    return () => {\n      // 离开当前任务页面时，重置状态树中的currentTodoTask为null，保持状态树整洁\n      dispatch(taskActions.changeCurrentTodoTask(null));\n    };\n  }, [dispatch, taskId]);\n\n  const [\n    unfinishedTaskItemRefs,\n    finishedTaskItemRefs,\n  ] = useMemo(() => {\n    const unfinished = [];\n    const finished = [];\n    if ($currentTodoTask != null) {\n      const $itemRefs = $currentTodoTask.getIn(['items', 'refs']);\n      $itemRefs.forEach(taskItemId => {\n        const $item = $currentTodoTask.getIn(['items', 'entity', taskItemId]);\n        if ($item.get('checked')) finished.push(taskItemId);\n        else unfinished.push(taskItemId);\n      });\n    }\n\n    return [unfinished, finished];\n  }, [$currentTodoTask]);\n\n  const toggleTaskItemPropChecked = useCallback(\n    ($taskItem) => {\n      dispatch(taskActions.toggleTaskItemPropChecked($taskItem));\n    },\n    [dispatch],\n  );\n\n  const jumpToEditingPage = useCallback(\n    () => {\n      // history.push(`/edit/${taskIdWillJump}`);\n      history.push(`/edit/${$currentTodoTask.get('id')}`);\n    },\n    [history, $currentTodoTask],\n  );\n\n  if ($currentTodoTask == null) return <NotFound message=\"Loding...\" time={5000} />;\n\n  return (\n    <>\n      <List>\n        <ListItem dense>\n          <Typography variant=\"h4\" gutterBottom>\n            {$currentTodoTask.get('title')}\n          </Typography>\n          <IconButton onClick={jumpToEditingPage}>\n            <EditIcon />\n          </IconButton>\n        </ListItem>\n      </List>\n      <Divider variant=\"fullWidth\" />\n      <List>\n        {unfinishedTaskItemRefs.length === 0 ? null : (\n          <ListItem dense>\n            <Typography variant=\"subtitle1\" gutterBottom>\n            待完成\n            </Typography>\n          </ListItem>\n        )}\n        <TransitionGroup>\n          {unfinishedTaskItemRefs.length === 0 ? null : unfinishedTaskItemRefs.map((taskItemId) => {\n            const $item = $currentTodoTask.getIn(['items', 'entity', taskItemId]);\n            return (\n              <Slide timeout={500} direction=\"right\" key={$item.get('id')}>\n                <div>\n                  <ListItemOfTaskItemWithCheckbox\n                    onClick={toggleTaskItemPropChecked}\n                    $taskItem={$item}\n                  />\n                  <Divider variant=\"middle\" />\n                </div>\n              </Slide>\n            );\n          })}\n        </TransitionGroup>\n      </List>\n      <List>\n        {finishedTaskItemRefs.length === 0 ? null : (\n          <ListItem dense>\n            <Typography variant=\"subtitle1\" gutterBottom>\n            已完成\n            </Typography>\n          </ListItem>\n        )}\n        <TransitionGroup>\n          {finishedTaskItemRefs.map((taskItemId) => {\n            const $item = $currentTodoTask.getIn(['items', 'entity', taskItemId]);\n            return (\n              <Slide timeout={500} direction=\"right\" key={$item.get('id')}>\n                <div>\n                  <ListItemOfTaskItemWithCheckbox\n                    style={{\n                      opacity: '0.5',\n                    }}\n                    onClick={toggleTaskItemPropChecked}\n                    $taskItem={$item}\n                  />\n                  <Divider variant=\"middle\" />\n                </div>\n              </Slide>\n            );\n          })}\n        </TransitionGroup>\n      </List>\n    </>\n  );\n}\n\n\nTodoListContainer.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n      action: PropTypes.string,\n    }),\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  // $tasks: PropTypes.instanceOf(List).isRequired,\n  // $tasksEntity: PropTypes.instanceOf(Map).isRequired,\n  $currentTodoTask: PropTypes.instanceOf(Map),\n  dispatch: PropTypes.func.isRequired,\n};\n\nTodoListContainer.defaultProps = {\n  $currentTodoTask: null,\n};\n\nconst mapState = ($state) => {\n  const $global = $state.get('global');\n  const $task = $state.get('task');\n  return {\n    showSideMenu: $global.get('showSideMenu'),\n    $tasksEntity: $task.getIn(['tasks', 'entity']),\n    $currentTodoTask: $task.get('currentTodoTask'),\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapState,\n    null,\n  )(TodoListContainer),\n);\n\n// export default TodoListContainer;\n","import React, { useMemo } from 'react';\nimport {\n  ListItem,\n  ListItemText,\n  Divider,\n  // Typography,\n} from '@material-ui/core';\nimport StarIcon from '@material-ui/icons/Star';\nimport IconButton from '@material-ui/core/IconButton';\nimport PropTypes from 'prop-types';\nimport { List as ImmutableList } from 'immutable';\nimport Fade from '@material-ui/core/Fade';\nimport { TransitionGroup } from 'react-transition-group';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\n\nimport { withStopEventtPropagation } from '../../../utils';\n\n\nfunction PinnedTaskList(props) {\n  const { onClickTask, $tasks, onClickIconButton } = props;\n\n  const onClickIconButtonWithStopEvtPropagation = useMemo(\n    () => withStopEventtPropagation(onClickIconButton),\n    [onClickIconButton],\n  );\n\n  return (\n    <List\n      subheader={(\n        <ListSubheader component=\"div\">\n          置顶任务\n        </ListSubheader>\n      )}\n    >\n      <Divider />\n      <TransitionGroup>\n        {$tasks.map($task => (\n          <Fade key={$task.get('id')} timeout={300}>\n            <div>\n              <ListItem onClick={() => onClickTask($task)} button>\n                <ListItemText primary={$task.get('title')} />\n                <IconButton onClick={evt => onClickIconButtonWithStopEvtPropagation(evt, $task)}>\n                  <StarIcon />\n                </IconButton>\n              </ListItem>\n            </div>\n          </Fade>\n        ))}\n      </TransitionGroup>\n    </List>\n  );\n}\n\nPinnedTaskList.propTypes = {\n  $tasks: PropTypes.instanceOf(ImmutableList).isRequired,\n  onClickIconButton: PropTypes.func,\n  onClickTask: PropTypes.func,\n};\n\nPinnedTaskList.defaultProps = {\n  onClickTask: () => {\n    /*eslint-disable*/\n    console.log('onClickTask');\n  },\n  onClickIconButton: () => {\n    /*eslint-disable*/\n    console.log('onClickIconButton');\n  },\n};\n\nexport default PinnedTaskList;\n","import React, { useMemo } from 'react';\nimport {\n  ListItem,\n  ListItemText,\n  Divider,\n  // Typography,\n} from '@material-ui/core';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport IconButton from '@material-ui/core/IconButton';\nimport PropTypes from 'prop-types';\nimport { List as ImmutableList } from 'immutable';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\n\nimport { withStopEventtPropagation } from '../../../utils';\n\nfunction RecentTaskList(props) {\n  const { onClickTask, $tasks, onClickIconButton } = props;\n\n  const onClickIconButtonWithStopEvtPropagation = useMemo(\n    () => withStopEventtPropagation(onClickIconButton),\n    [onClickIconButton],\n  );\n\n  return (\n    <List\n      subheader={(\n        <ListSubheader component=\"div\">\n          最近任务\n        </ListSubheader>\n      )}\n    >\n      <Divider />\n      {$tasks.map(($task) => (\n        <React.Fragment key={$task.get('id')}>\n          <ListItem onClick={() => onClickTask($task)} button>\n            <ListItemText primary={$task.get('title')} />\n            {$task.get('isPinned') ? null : (\n              <IconButton onClick={(evt) => onClickIconButtonWithStopEvtPropagation(evt, $task)}>\n                <StarBorderIcon />\n              </IconButton>\n            )}\n          </ListItem>\n        </React.Fragment>\n      ))}\n    </List>\n  );\n}\n\nRecentTaskList.propTypes = {\n  $tasks: PropTypes.instanceOf(ImmutableList).isRequired,\n  onClickIconButton: PropTypes.func,\n  onClickTask: PropTypes.func,\n};\n\nRecentTaskList.defaultProps = {\n  onClickTask: () => {\n    /*eslint-disable*/\n    console.log('onClickTask');\n  },\n  onClickIconButton: () => {\n    /*eslint-disable*/\n    console.log('onClickIconButton');\n  }\n};\n\nexport default RecentTaskList;\n","/* eslint-disable function-paren-newline */\nimport React, { useCallback, useMemo } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { Map, List } from 'immutable';\nimport { connect } from 'react-redux';\n\nimport PinnedTaskList from './components/PinnedTaskList';\nimport RecentTaskList from './components/RecentTaskList';\n\nimport { editingTaskActions } from '../../store/actions';\n\nfunction PinnedAndRecentTaskList(props) {\n  const {\n    $tasksRefs,\n    dispatch,\n    history,\n    $tasksEntity,\n  } = props;\n\n  const $recentTasks = useMemo(\n    () =>\n      $tasksRefs.map(ref => $tasksEntity.get(ref)).sort(($taskA, $taskB) => {\n        const taskATime = $taskA.get('lastVisitTime') || 0;\n        const taskBTime = $taskB.get('lastVisitTime') || 0;\n        return taskBTime - taskATime;\n      }),\n    [$tasksRefs, $tasksEntity],\n  );\n\n  const $pinnedTasks = useMemo(\n    () => $tasksRefs.map(ref => $tasksEntity.get(ref)).filter($task => $task.get('isPinned')),\n    [$tasksRefs, $tasksEntity],\n  );\n\n  const pinOneTask = useCallback(\n    ($task) => {\n      const $pinndTask = $task.set('isPinned', true);\n      dispatch(editingTaskActions.effectUpdateTask($pinndTask));\n    },\n    [dispatch],\n  );\n\n  const unpinOneTask = useCallback(\n    ($task) => {\n      const $unpinndTask = $task.set('isPinned', false);\n      dispatch(editingTaskActions.effectUpdateTask($unpinndTask));\n    },\n    [dispatch],\n  );\n\n  const onClickTask = useCallback(\n    ($task) => {\n      history.push(`/todo/${$task.get('id')}`);\n    },\n    [history],\n  );\n\n  return (\n    <React.Fragment>\n      <PinnedTaskList\n        onClickIconButton={unpinOneTask}\n        onClickTask={onClickTask}\n        $tasks={$pinnedTasks}\n      />\n      <RecentTaskList\n        onClickIconButton={pinOneTask}\n        onClickTask={onClickTask}\n        $tasks={$recentTasks}\n      />\n    </React.Fragment>\n  );\n}\n\nPinnedAndRecentTaskList.propTypes = {\n  // $recentTaskIds: PropTypes.instanceOf(ImmutableList).isRequired,\n  // $pinnedTaskIds: PropTypes.instanceOf(ImmutableList).isRequired,\n  $tasksEntity: PropTypes.instanceOf(Map).isRequired,\n  $tasksRefs: PropTypes.instanceOf(List).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nPinnedAndRecentTaskList.defaultProps = {};\n\nconst mapState = ($state) => {\n  const $task = $state.get('task');\n  return {\n    $recentTaskIds: $task.get('recentTaskIds'),\n    $pinnedTaskIds: $task.get('pinnedTaskIds'),\n    $tasksEntity: $task.getIn(['tasks', 'entity']),\n    $tasksRefs: $task.getIn(['tasks', 'refs']),\n  };\n};\n\nexport default connect(\n  mapState,\n  null,\n)(PinnedAndRecentTaskList);\n","import React, { useCallback, useMemo } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Proptypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { List, Map } from 'immutable';\n\nimport { COLOR_ORANGE, COLOR_GREEN, COLOR_RED } from '../utils/constants';\nimport { taskActions } from '../store/actions';\n\nconst CompleteTaskButton = (props) => {\n  const {\n    $task,\n    $tasksItemsEntity,\n    $tasksItemsRefs,\n    dispatch,\n    history,\n  } = props;\n\n  const $unchckedTaskItems = useMemo(\n    () =>\n      $tasksItemsRefs\n        .filter((taskId) => !$tasksItemsEntity.getIn([taskId, 'checked']))\n        .map((taskId) => $tasksItemsEntity.get(taskId)),\n    [$tasksItemsEntity, $tasksItemsRefs],\n  );\n  const numOfAllTaskItem = $tasksItemsRefs.size;\n  const numOfUncheckedItem = $unchckedTaskItems.size;\n  const numOfCheckedItem = numOfAllTaskItem - numOfUncheckedItem;\n  const isAllComleted = numOfAllTaskItem === numOfCheckedItem;\n  const hasZeroTaskItem = numOfAllTaskItem === 0;\n  const onClickCompleteButton = useCallback(() => {\n    if (hasZeroTaskItem) {\n      // 零个可完成任务项，提供跳转到编辑页面的快速方式\n      history.push(`/edit/${$task.get('id')}`);\n    } else if (isAllComleted) {\n      /* 所有任务项全部完成，跳转到APP主页 */\n      history.push('/');\n    } else {\n      dispatch(\n        taskActions.checkTaskItemInTaskItemsByTaskId(\n          $unchckedTaskItems.getIn(['0', 'id']),\n        ),\n      );\n    }\n  }, [\n    $task,\n    hasZeroTaskItem,\n    isAllComleted,\n    $unchckedTaskItems,\n    history,\n    dispatch,\n  ]);\n\n  let buttonText;\n  let buttonColor;\n  if (hasZeroTaskItem) {\n    buttonText = '添加任务项';\n    buttonColor = COLOR_RED;\n  } else if (isAllComleted) {\n    buttonText = `全部完成(${numOfCheckedItem}/${numOfAllTaskItem})`;\n    buttonColor = COLOR_GREEN;\n  } else {\n    buttonText = `完成一个任务项(${numOfCheckedItem}/${numOfAllTaskItem})`;\n    buttonColor = COLOR_ORANGE;\n  }\n\n  return (\n    <Button\n      style={{\n        backgroundColor: buttonColor,\n        color: '#fff',\n        transition: 'background-color 300ms',\n      }}\n      size=\"medium\"\n      fullWidth\n      aria-label=\"add\"\n      onClick={onClickCompleteButton}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nCompleteTaskButton.propTypes = {\n  $tasksItemsEntity: Proptypes.instanceOf(Map),\n  $tasksItemsRefs: Proptypes.instanceOf(List),\n  $task: Proptypes.instanceOf(Map),\n  dispatch: Proptypes.func.isRequired,\n  history: Proptypes.shape({\n    push: Proptypes.func.isRequired,\n  }).isRequired,\n};\n\nCompleteTaskButton.defaultProps = {\n  $tasksItemsRefs: new List(),\n  $tasksItemsEntity: new Map(),\n  $task: null,\n};\n\nconst mapState = ($state) => {\n  const $task = $state.get('task');\n  return {\n    $tasksItemsEntity: $task.getIn(['currentTodoTask', 'items', 'entity']),\n    $tasksItemsRefs: $task.getIn(['currentTodoTask', 'items', 'refs']),\n    $task: $task.get('currentTodoTask'),\n  };\n};\n\nexport default connect(\n  mapState,\n  null,\n)(CompleteTaskButton);\n","import React, { useCallback } from 'react';\n// import AppBar from '@material-ui/core/AppBar';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Fab from '@material-ui/core/Fab';\nimport Proptypes from 'prop-types';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\n\nimport { connect } from 'react-redux';\n\nimport { withRouter } from 'react-router-dom';\nimport { List } from 'immutable';\nimport { editingTaskActions } from '../store/actions';\n\nconst EdtingTaskButtonContainer = (props) => {\n  const { $futureTasks, $oldTasks, dispatch } = props;\n  const isUndoBtnDisabled = $oldTasks.size === 0;\n  const isRedoBtnDisabled = $futureTasks.size === 0;\n\n  const undoEditing = useCallback(() => {\n    dispatch(editingTaskActions.undoCurrentTask());\n  }, [dispatch]);\n\n  const redoEditing = useCallback(() => {\n    dispatch(editingTaskActions.redoCurrentTask());\n  }, [dispatch]);\n\n  return (\n    <ButtonGroup fullWidth variant=\"outlined\">\n      <Button onClick={undoEditing} disabled={isUndoBtnDisabled}>\n        Undo\n      </Button>\n      <Button onClick={redoEditing} disabled={isRedoBtnDisabled}>\n        Redo\n      </Button>\n    </ButtonGroup>\n  );\n};\nEdtingTaskButtonContainer.propTypes = {\n  $futureTasks: Proptypes.instanceOf(List).isRequired,\n  $oldTasks: Proptypes.instanceOf(List).isRequired,\n  dispatch: Proptypes.func.isRequired,\n  // isEditingTaskEdited: Proptypes.bool.isRequired,\n};\n\nconst mapState = ($state) => {\n  const $editingTask = $state.get('editingTask');\n  return {\n    $futureTasks: $editingTask.get('futureTasks'),\n    $oldTasks: $editingTask.get('oldTasks'),\n  };\n};\nexport default connect(\n  mapState,\n  null,\n)(withRouter(EdtingTaskButtonContainer));\n","/* eslint-disable no-lone-blocks */\nimport React, { useCallback, useRef } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Proptypes from 'prop-types';\n\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport { useForceUpdate } from '../hooks';\n\n\nfunction HomeButton(props) {\n  const {\n    onClick,\n    needDoubleClick,\n    timeout,\n  } = props;\n\n  const forceUpdate = useForceUpdate();\n  const clickCountRef = useRef(null);\n  const timerIdRef = useRef(null);\n\n  const doOnClick = useCallback((...args) => {\n    if (!needDoubleClick) {\n      onClick(...args);\n      return;\n    }\n\n    // 以下是开启了needDoubleClick模式的逻辑\n    clickCountRef.current += 1;\n    const clickCountSoFar = clickCountRef.current;\n    if (clickCountSoFar === 1) {\n      if (timerIdRef.current != null) clearTimeout(timerIdRef.current); // 防御性判断\n\n      timerIdRef.current = setTimeout(() => {\n        clickCountRef.current = 0;\n        timerIdRef.current = null;\n        forceUpdate();\n      }, timeout);\n    } else if (clickCountSoFar === 2) {\n      if (timerIdRef.current != null) clearTimeout(timerIdRef.current);\n\n      clickCountRef.current = 0;\n      onClick(...args);\n    }\n    forceUpdate();\n  }, [onClick, needDoubleClick, forceUpdate, timeout]);\n\n  const backgroundColor = clickCountRef.current === 1\n    ? 'rgba(0, 0, 0, 0.25)'\n    : '';\n\n  return (\n    <IconButton\n      style={{\n        backgroundColor,\n        transition: 'background-color 300ms linear',\n      }}\n      onClick={doOnClick}\n      edge=\"end\"\n    >\n      <HomeIcon />\n    </IconButton>\n  );\n}\n\nHomeButton.propTypes = {\n  onClick: Proptypes.func.isRequired,\n  needDoubleClick: Proptypes.bool,\n  timeout: Proptypes.number,\n};\n\nHomeButton.defaultProps = {\n  needDoubleClick: false,\n  timeout: 1000,\n};\n\nexport default HomeButton;\n","\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Proptypes from 'prop-types';\n\nimport { COLOR_BLUE } from '../../../utils/constants';\n\nfunction StartTaskButton(props) {\n  const { onClick } = props;\n  return (\n    <Button\n      style={{ backgroundColor: COLOR_BLUE, color: '#fff' }}\n      size=\"medium\"\n      fullWidth\n      // variant=\"outlined\"\n      color=\"primary\"\n      aria-label=\"add\"\n      onClick={onClick}\n    >\n      {'开始一项任务'}\n    </Button>\n  );\n}\n\n\nStartTaskButton.propTypes = {\n  onClick: Proptypes.func.isRequired,\n};\n\nexport default StartTaskButton;\n","import React, { useCallback } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n// import Proptypes from 'prop-types';\n// import MoreIcon from '@material-ui/icons/MoreVert';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport { useDispatch } from 'react-redux';\nimport { Switch, Route, useHistory } from 'react-router-dom';\n\nimport { showSideMenu } from '../../store/actions';\n// import { COLOR_BLUE } from '../../utils/constants';\nimport CompleteTaskButtonContainer from '../CompleteTaskButton';\n\nimport TaskEditorButton from '../TaskEditorButton';\nimport HomeButton from '../../components/HomeButton';\nimport StartTaskButton from './ui/StartTaskButton';\n\nfunction AppBarContainer() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onClickMenuButton = useCallback(() => {\n    dispatch(showSideMenu());\n  }, [dispatch]);\n\n  const onClickStartOneTaskButton = useCallback(() => {\n    dispatch(showSideMenu());\n  }, [dispatch]);\n\n  const onClickHomeButton = useCallback(() => {\n    history.push('/');\n  }, [history]);\n\n  return (\n    <AppBar\n      style={{\n        backgroundColor: 'white',\n        flex: '0 0 60px',\n      }}\n      position=\"static\"\n    >\n      <Toolbar>\n        <IconButton edge=\"start\" onClick={onClickMenuButton}>\n          <MenuIcon />\n        </IconButton>\n        <div\n          className=\"appbar-button\"\n          style={{\n            flex: '1',\n            padding: '0 5px',\n          }}\n        >\n          <Switch>\n            <Route path=\"/edit/:id\" component={TaskEditorButton} />\n            <Route path=\"/todo\" component={CompleteTaskButtonContainer} />\n            <Route\n              render={() => (\n                <StartTaskButton onClick={onClickStartOneTaskButton} />\n              )}\n            />\n          </Switch>\n        </div>\n        <HomeButton needDoubleClick onClick={onClickHomeButton} />\n      </Toolbar>\n    </AppBar>\n  );\n}\nAppBarContainer.propTypes = {\n\n};\n\nAppBarContainer.defaultProps = {\n};\n\n\nexport default AppBarContainer;\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\n\nimport ErrorIcon from '@material-ui/icons/Clear';\nimport SuccessIcon from '@material-ui/icons/Done';\nimport WarnIcon from '@material-ui/icons/PriorityHigh';\n\nimport PropTypes from 'prop-types';\nimport { Card, CardHeader } from '@material-ui/core';\n\nimport { COLOR_GREEN, COLOR_RED, COLOR_YELLOW } from '../../../utils/constants';\n\nconst SUCCESS = 'success';\nconst ERROR = 'error';\nconst WARN = 'warn';\n\nconst TYPE_COLOR_MAPPING = {\n  [SUCCESS]: COLOR_GREEN,\n  [ERROR]: COLOR_RED,\n  [WARN]: COLOR_YELLOW,\n};\n\nfunction NotificationCardWithRef(props, ref) {\n  const {\n    type, title, style, subtitle,\n  } = props;\n  const iconStyle = {\n    borderRadius: '50%',\n    overflow: 'hidden',\n    color: '#fff',\n    width: '48px',\n    height: '48px',\n    backgroundColor: TYPE_COLOR_MAPPING[type],\n  };\n  let icon = <WarnIcon style={iconStyle} />;\n  if (type === ERROR) icon = <ErrorIcon style={iconStyle} />;\n  if (type === SUCCESS) icon = <SuccessIcon style={iconStyle} />;\n\n  return (\n    <Card ref={ref} style={style}>\n      <CardHeader\n        avatar={icon}\n        title={title}\n        subheader={subtitle}\n        // subheader=\"status: 401\"\n      />\n    </Card>\n  );\n}\n\nconst NotificationCard = React.forwardRef(NotificationCardWithRef);\n\nNotificationCard.types = {\n  SUCCESS,\n  ERROR,\n  WARN,\n};\n\nNotificationCard.propTypes = {\n  type: PropTypes.oneOf([WARN, ERROR, SUCCESS]),\n  title: PropTypes.node.isRequired,\n  subtitle: PropTypes.node,\n  style: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n};\n\nNotificationCard.defaultProps = {\n  type: 'none',\n  subtitle: null,\n  style: undefined,\n};\n\n\nexport default NotificationCard;\n","/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n// import PropTypes from 'prop-types';\n// import { List } from 'immutable';\n\nimport Zoom from '@material-ui/core/Zoom';\nimport { TransitionGroup } from 'react-transition-group';\nimport NotificationCard from './components/NotificationCard';\n// import Zoom from '../components/transitions/Zoom';\n// import TransitionGroup from '../components/transitions/TransitionGroup';\n\nconst notificationsSelector = $state => $state.getIn(['global', 'notifications']);\n\nfunction NotificationsPanelContainer() {\n  const $notifications = useSelector(notificationsSelector);\n  return (\n    <>\n      <div\n        className=\"NotificationsPanelContainer\"\n        style={{\n          position: 'absolute',\n          top: '0',\n          left: '0',\n          width: '100%',\n          zIndex: '4000',\n          boxSizing: 'border-box',\n          padding: '0 20px',\n        }}\n      >\n        <TransitionGroup>\n          {$notifications.map(({\n            title, key, detail = null, type = 'warn',\n          }) => (\n            <Zoom key={key}>\n              <NotificationCard\n                style={{ marginTop: '20px' }}\n                type={type}\n                title={title}\n                subtitle={detail}\n              />\n            </Zoom>\n          ))}\n        </TransitionGroup>\n      </div>\n    </>\n  );\n}\n\nNotificationsPanelContainer.propTypes = {\n  // dispatch: PropTypes.func.isRequired,\n  // showAccountManager: PropTypes.bool.isRequired,\n  // isLogining: PropTypes.bool.isRequired,\n  // isRegistering: PropTypes.bool.isRequired,\n  // hasLogin: PropTypes.bool.isRequired,\n  // $notifications: PropTypes.instanceOf(List).isRequired,\n};\n\nNotificationsPanelContainer.defaultProps = {};\n\n// const mapState = ($state) => ({\n//   $notifications: $state.getIn(['global', 'notifications']),\n//   // hasLogin: $state.getIn(['user', 'hasLogin']),\n//   // isLogining: $state.getIn(['user', 'isLogining']),\n//   // isRegistering: $state.getIn(['user', 'isRegistering']),\n//   // $userInfo: $state.getIn(['user', 'userInfo']),\n// });\n\nexport default NotificationsPanelContainer;\n","import React, { Suspense } from 'react';\nimport Proptypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport AppBar from '../containers/AppBar';\n\n\n// import AccountManagerContainer from '../containers/AccountManagerContainer';\nimport NotificationsPanelContainer from '../containers/NotificationsPanelContainer';\nimport { useHasBeenTrued } from '../hooks';\n\nconst SideMenuContainer = React.lazy(() => import(/* webpackChunkName: \"SideMenuContainer\", webpackPrefetch: true */ '../containers/SideMenuContainer'));\n\nfunction CommonLayout(props) {\n  const {\n    children,\n  } = props;\n\n  const isShowSideMenu = useSelector($state => $state.getIn(['global', 'showSideMenu']));\n\n  const hasSideMenuShowed = useHasBeenTrued(isShowSideMenu);\n\n  return (\n    <div\n      className=\"CommonLayout\"\n      style={{\n        position: 'relative',\n        height: '100%',\n        display: 'flex',\n        flexFlow: 'column nowrap',\n      }}\n    >\n      <div\n        className=\"CommonLayout-content\"\n        style={{\n          position: 'relative',\n          flex: '1',\n          overflowY: 'scroll',\n          overflowX: 'hidden',\n        }}\n      >\n        {children}\n      </div>\n      <div\n        className=\"CommonLayout-navbar\"\n        style={{\n          flex: '0 0 60px',\n        }}\n      >\n        <AppBar />\n      </div>\n      <NotificationsPanelContainer />\n      {hasSideMenuShowed\n        ? (\n          <Suspense fallback={null}>\n            <SideMenuContainer />\n          </Suspense>\n        )\n        : null\n      }\n    </div>\n  );\n}\n\nCommonLayout.propTypes = {\n  // dispatch: PropTypes.func.isRequired,\n  children: Proptypes.node,\n};\n\nCommonLayout.defaultProps = {\n  children: null,\n};\n\nexport default CommonLayout;\n","import React, { useState, useCallback } from 'react';\nimport List from '@material-ui/core/List';\nimport Input from '@material-ui/core/Input';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/DeleteForever';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport EditIcon from '@material-ui/icons/BorderColor';\n\n// import { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport { Map } from 'immutable';\nimport Fade from '@material-ui/core/Fade';\nimport { TransitionGroup } from 'react-transition-group';\n\nimport Checkbox from '../../../components/Checkbox';\nimport { uniqueId } from '../../../utils';\n\nfunction TaskItemList(props) {\n  const {\n    $task,\n    onCreateNewTaskItem,\n    onClickRemoveButton,\n    onClickEditButton,\n  } = props;\n  const [newTaskItemTitle, setNewTaskItemTitle] = useState('');\n\n  const onInputNewTaskItem = useCallback((evt) => {\n    setNewTaskItemTitle(evt.target.value);\n  }, []);\n\n  const onKeyEnterUp = useCallback(\n    (evt) => {\n      const KEY_ENTER = 13;\n      const { keyCode: keyUp = -1 } = evt;\n      const taksItemTitle = evt.target.value;\n      if (taksItemTitle.length !== 0 && keyUp === KEY_ENTER) {\n        onCreateNewTaskItem(\n          Map({\n            id: uniqueId(),\n            title: taksItemTitle,\n            checked: false,\n          }),\n        );\n        setNewTaskItemTitle('');\n      }\n    },\n    [setNewTaskItemTitle, onCreateNewTaskItem],\n  );\n\n  const emitTaskId = useCallback(() => {\n    onClickEditButton($task.get('id'));\n  }, [$task, onClickEditButton]);\n\n  return (\n    <List>\n      <ListItem dense>\n        <Typography variant=\"h4\" gutterBottom>\n          {$task.get('title')}\n        </Typography>\n        <IconButton onClick={emitTaskId}>\n          <EditIcon />\n        </IconButton>\n      </ListItem>\n      <TransitionGroup>\n        {$task.getIn(['items', 'refs']).map((taskItemId) => {\n          const $item = $task.getIn(['items', 'entity', taskItemId]);\n          return (\n            <Fade key={$item.get('id')} timeout={600}>\n              <div>\n                <ListItem>\n                  <Checkbox disabled edge=\"start\" checked={$item.get('checked')} />\n                  <ListItemText primary={$item.get('title')} />\n                  <IconButton onClick={() => onClickRemoveButton($item)}>\n                    <DeleteIcon />\n                  </IconButton>\n                </ListItem>\n                <Divider variant=\"middle\" />\n              </div>\n            </Fade>\n          );\n        })}\n      </TransitionGroup>\n      <ListItem>\n        <Input\n          value={newTaskItemTitle}\n          onKeyUp={onKeyEnterUp}\n          onChange={onInputNewTaskItem}\n          placeholder=\"新增待做事项\"\n          fullWidth\n        />\n      </ListItem>\n    </List>\n  );\n}\n\nTaskItemList.propTypes = {\n  $task: PropTypes.instanceOf(Map).isRequired,\n  onCreateNewTaskItem: PropTypes.func,\n  onClickRemoveButton: PropTypes.func,\n  onClickEditButton: PropTypes.func,\n};\n\nTaskItemList.defaultProps = {\n  onCreateNewTaskItem: () => {\n    /* eslint-disable */\n    console.log('onCreateNewTaskItem');\n  },\n  onClickRemoveButton: () => {\n    /* eslint-disable */\n    console.log('onCreateNewTaskItem');\n  },\n  onClickCheckbox: () => {\n    /* eslint-disable */\n    console.log('onClickCheckbox');\n  },\n  onClickEditButton: () => {\n    /* eslint-disable */\n    console.log('onClickEditButton');\n  },\n};\n\nexport default TaskItemList;\n\n// export default TaskItemList;\n","/* eslint-disable nonblock-statement-body-position */\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { connect, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n// import { Redirect } from 'react-router-dom';\n// import { Map, List } from 'immutable';\nimport { Map } from 'immutable';\n\nimport TaskItemList from './components/TaskItemList';\nimport { editingTaskActions } from '../../store/actions';\nimport NotFound from '../../components/NotFound';\n// import { uniqueId } from '../utils';\n\nconst mapState = ($state) => {\n  const $global = $state.get('global');\n  const $task = $state.get('task');\n  const $editingTask = $state.get('editingTask');\n  return {\n    showSideMenu: $global.get('showSideMenu'),\n    $tasksEntity: $task.getIn(['tasks', 'entity']),\n    $currentEditingTask: $editingTask.get('currentTask'),\n  };\n};\n\nfunction TaskEditor(props) {\n  const {\n    $currentEditingTask,\n  } = props;\n\n  const { id: taskId } = useParams();\n\n  const [isTaskLoaded, setIsTaskLoaded] = useState(false);\n  const [isTaskTaskChanged, setIsTaskTaskChanged] = useState(false);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isTaskLoaded) {\n      dispatch(editingTaskActions.effectGetTask(taskId));\n      if ($currentEditingTask != null) setIsTaskLoaded(true);\n    }\n  }, [taskId, isTaskLoaded, setIsTaskLoaded, $currentEditingTask]);\n\n  useEffect(\n    () => () => {\n      // 因为根据taskId加载任务，所以taskId变化，即任务变化，所以每次切换任务，就要重置编辑历史，重置redo，undo按钮状态\n      // 即使退出也要重置状态，保持状态树的干净\n      dispatch(editingTaskActions.clearAllEdtingHistory());\n      // 退出任务, 重置为null，\n      dispatch(editingTaskActions.changeCurrentTask(null));\n    },\n    [taskId],\n  );\n\n  useEffect(() => {\n    if (isTaskLoaded && isTaskTaskChanged) {\n      // 同步到云端\n      dispatch(editingTaskActions.effectUpdateTask($currentEditingTask));\n    }\n  }, [isTaskLoaded, isTaskTaskChanged, $currentEditingTask]);\n\n  const addNewTaskItem = useCallback($newTaskItem => {\n    dispatch(editingTaskActions.snapshotCurrentTask());\n    dispatch(editingTaskActions.addTaskItemInCurrentTask($newTaskItem));\n    // 因为添加了新任务项，所以清空重做任务列表，重置 重做 按钮状态，为了避免编辑状态混乱\n    dispatch(editingTaskActions.clearFutureTasks());\n    setIsTaskTaskChanged(true);\n  }, []);\n\n  const removeTaskItem = useCallback($taskItem => {\n    dispatch(editingTaskActions.snapshotCurrentTask());\n    dispatch(editingTaskActions.removeTaskItemInCurrentTask($taskItem));\n    setIsTaskTaskChanged(true);\n  }, []);\n\n  if ($currentEditingTask == null) return <NotFound message=\"Loding...\" />;\n\n  return (\n    <TaskItemList\n      onCreateNewTaskItem={addNewTaskItem}\n      onClickRemoveButton={removeTaskItem}\n      $task={$currentEditingTask}\n      isEditable\n    />\n  );\n}\n\nTaskEditor.propTypes = {\n  $currentEditingTask: PropTypes.instanceOf(Map),\n};\n\nTaskEditor.defaultProps = {\n  $currentEditingTask: null,\n};\n\nexport default connect(\n  mapState,\n  null,\n)(TaskEditor);\n","import React, { useEffect } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nimport TodoListContainer from '../../containers/TodoListContainer';\nimport PinnedAndRecentTaskList from '../../containers/PinnedAndRecentTaskList';\n\nimport CommonLayout from '../../layouts/CommonLayout';\n\nimport { taskActions } from '../../store/actions';\nimport TaskEditor from '../../containers/TaskEditor';\n\nconst hasLoginSelector = $state => $state.getIn(['user', 'hasLogin']);\n\nexport default function HomePage() {\n  const hasLogin = useSelector(hasLoginSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (hasLogin) {\n      dispatch(taskActions.effectGetTaskList());\n    }\n  }, [hasLogin]);\n\n  return (\n    <CommonLayout>\n      <Switch>\n        <Route path=\"/todo/:id\" component={TodoListContainer} />\n        <Route path=\"/edit/:id\" component={TaskEditor} />\n        <Route component={PinnedAndRecentTaskList} />\n      </Switch>\n    </CommonLayout>\n  );\n}\n","import React from 'react';\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\n\n\nimport AccountPage from '../pages/AccountPage';\nimport HomePage from '../pages/HomePage';\n\nfunction RootRoutes() {\n  return (\n    <>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/account\" component={AccountPage} />\n    </>\n  );\n}\n\nexport default RootRoutes;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\n// import Index from './Layout/Index';\n// import TodoListContainer from './containers/TodoListContainer';\n\n// import { isDev } from './env';\n\nimport { store } from './store';\nimport InitWrapperContainer from './containers/InitWrapperContainer';\nimport RootRoutes from './routes/RootRoutes';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <InitWrapperContainer>\n        <div\n          id=\"app-main\"\n          style={{\n            height: '100vh',\n            overflow: 'hidden',\n          }}\n        >\n          <Router>\n            <RootRoutes />\n          </Router>\n        </div>\n      </InitWrapperContainer>\n    </Provider>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport React from 'react';\n\n// import * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport './index.css';\n// import 'antd/dist/antd.css';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n// serviceWorker.register();\n","/* eslint-disable operator-linebreak */\nexport const CHANGE_CURRENT_TASK = 'editingTask/CHANGE_CURRENT_TASK';\n\nexport const ADD_TASK_ITEM_IN_CURRENT_TASK =\n  'editingTask/ADD_TASK_ITEM_IN_CURRENT_TASK';\n\nexport const REMOVE_TASK_ITEM_IN_CURRENT_TASK =\n  'editingTask/REMOVE_TASK_ITEM_IN_CURRENT_TASK';\n\nexport const SNAPSHOT_CURRENT_TASK = 'editingTask/SNAPSHOT_CURRENT_TASK';\n\nexport const UNDO_CURRENT_TASK = 'editingTask/UNDO_CURRENT_TASK';\n\nexport const REDO_CURRENT_TASK = 'editingTask/REDO_CURRENT_TASK';\n\nexport const CLEAR_FUTURE_TASKS = 'editingTask/CLEAR_FUTURE_TASKS';\n\nexport const CLEAR_EDITNG_HISTORY = 'editingTask/CLEAR_EDITNG_HISTORY';\n\n// effect\n\nexport const EFFECT_UPDATE_TASK = 'editingtask/EFFECT_UPDATE_TASK';\n\nexport const EFFECT_GET_TASK = 'editingTask/EFFECT_GET_TASK';\n","export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\n\nexport const LOGOUT = 'LOGOUT';\n\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\n\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\n\n// effect\n\nexport const EFFECT_GET_USERINFO = 'EFFECT_GET_USERINFO';\n\nexport const EFFECT_LOGIN = 'EFFECT_LOGIN';\n\nexport const EFFECT_REGISTER = 'EFFECT_REGISTER';\n","export const SHOW_SIDE_MENU = 'global/SHOW_SIDE_MENU';\n\nexport const HIDE_SIDE_MENU = 'global/HIDE_SIDE_MENU';\n\nexport const ADD_ONE_NOTIFICATION = 'ADD_ONE_NOTIFICATION';\n\nexport const REMOVE_THE_TOP_NOTIFICATION = 'REMOVE_THE_TOP_NOTIFICATION';\n","export const COLOR_BLUE = '#2196f3';\n\nexport const COLOR_GREEN = '#43a047';\n\nexport const COLOR_YELLOW = '#fdd835';\n\nexport const COLOR_GREY = '#9e9e9e';\n\nexport const COLOR_ORANGE = '#ff5722';\n\nexport const COLOR_RED = '#f44336';\n\nexport const ROOT_URL = '/monica/';\n","import * as actionTypes from './actionTypes';\n\nexport const changeTasks = ($tasks) => ({\n  type: actionTypes.CHANGE_TASKS,\n  payload: $tasks,\n});\n\nexport const addTaskToTasks = (task) => ({\n  type: actionTypes.ADD_TASK_TO_TASKS,\n  payload: task,\n});\n\nexport const removeTaskInTasks = (task) => ({\n  type: actionTypes.REMOVE_TASK_IN_TASKS,\n  payload: task,\n});\n\nexport const changeCurrentTodoTask = ($task) => ({\n  type: actionTypes.CHANGE_CURRENT_TODO_TASK,\n  payload: $task,\n});\n\nexport const changeCurrentTodoTaskById = (taskId) => ({\n  type: actionTypes.CHANGE_CURRENT_TODO_TASK_BY_ID,\n  payload: taskId,\n});\n\n// -- task item\n\n// export const checkTaskItemInTaskItemsByIndex = (index) => ({\n//   type: actionTypes.CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_INDEX,\n//   payload: index,\n// });\n\nexport const checkTaskItemInTaskItemsByTaskId = (taskId) => ({\n  type: actionTypes.CHECK_TASK_ITEM_IN_TASK_ITEMS_BY_TASK_ID,\n  payload: taskId,\n});\n\nexport const toggleTaskItemPropChecked = ($taskItem) => ({\n  type: actionTypes.TOGGLE_TASK_ITEM_CHECKED,\n  payload: $taskItem,\n});\n\n// edting task\n\n// export const updateTaskFromEdting = ($task) => ({\n//   type: actionTypes.UPDARE_TASK_FROM_EDTING,\n//   payload: $task,\n// });\n\nexport const updateTaskInTasks = ($task) => ({\n  type: actionTypes.UPDATE_TASK_IN_TASKS,\n  payload: $task,\n});\n\n// effect\n\nexport const effectGetTaskList = () => ({\n  type: actionTypes.EFFECT_GET_TASK_LIST,\n});\n\nexport const effectDeleteTask = (taskId) => ({\n  type: actionTypes.EFFECT_DELETE_TASK,\n  payload: taskId,\n});\n\nexport const effectGetTask = (taskId) => ({\n  type: actionTypes.EFFECT_GET_TASK,\n  payload: taskId,\n});\n\n// export const effectUpdateTask = ($task) => ({\n//   type: actionTypes.EFFECT_UPDATE_TASK,\n//   payload: $task,\n// });\n","import * as actionTypes from './actionTypes';\n\nexport const showSideMenu = () => ({\n  type: actionTypes.SHOW_SIDE_MENU,\n});\n\nexport const hideSideMenu = () => ({\n  type: actionTypes.HIDE_SIDE_MENU,\n});\n\n/**\n *\n * @param {{\n *  title: string;\n *  message?: string;\n *  type: 'warn' | 'error' | 'success';\n *  key: string;\n * }} info\n */\nexport const addOneNitification = (info) => ({\n  type: actionTypes.ADD_ONE_NOTIFICATION,\n  payload: info,\n});\n\nexport const removeTheTopNitification = () => ({\n  type: actionTypes.REMOVE_THE_TOP_NOTIFICATION,\n});\n","/* eslint-disable arrow-parens */\nimport * as actionTypes from './actionTypes';\n\nexport const changeCurrentTask = ($task) => ({\n  type: actionTypes.CHANGE_CURRENT_TASK,\n  payload: $task,\n});\n\nexport const addTaskItemInCurrentTask = ($taskItem) => ({\n  type: actionTypes.ADD_TASK_ITEM_IN_CURRENT_TASK,\n  payload: $taskItem,\n});\n\nexport const removeTaskItemInCurrentTask = ($taskItem) => ({\n  type: actionTypes.REMOVE_TASK_ITEM_IN_CURRENT_TASK,\n  payload: $taskItem,\n});\n\nexport const undoCurrentTask = () => ({\n  type: actionTypes.UNDO_CURRENT_TASK,\n});\n\nexport const redoCurrentTask = () => ({\n  type: actionTypes.REDO_CURRENT_TASK,\n});\n\nexport const snapshotCurrentTask = () => ({\n  type: actionTypes.SNAPSHOT_CURRENT_TASK,\n});\n\nexport const clearFutureTasks = () => ({\n  type: actionTypes.CLEAR_FUTURE_TASKS,\n});\n\nexport const clearAllEdtingHistory = () => ({\n  type: actionTypes.CLEAR_EDITNG_HISTORY,\n});\n\n// effect\n\nexport const effectUpdateTask = ($task) => ({\n  type: actionTypes.EFFECT_UPDATE_TASK,\n  payload: $task,\n});\n\nexport const effectGetTask = (taskId) => ({\n  type: actionTypes.EFFECT_GET_TASK,\n  payload: taskId,\n});\n","import * as actionTypes from './actionTypes';\n\nexport const createTask = (task) => ({\n  type: actionTypes.EFFECT_CREATE_TASK,\n  payload: task,\n});\n\nexport const updateTask = (task) => ({\n  type: actionTypes.EFFECT_UPDATE_TASK,\n  payload: task,\n});\n","import * as actionTypes from './actionTypes';\n\nexport const loginSuccess = ($loginInfo) => ({\n  type: actionTypes.LOGIN_SUCCESS,\n  payload: $loginInfo,\n});\n\nexport const loginFail = (err) => ({\n  type: actionTypes.LOGIN_FAIL,\n  payload: err,\n});\n\nexport const logout = () => ({\n  type: actionTypes.LOGOUT,\n});\n\nexport const registerSuccess = ($registerInfo) => ({\n  type: actionTypes.REGISTER_SUCCESS,\n  payload: $registerInfo,\n});\n\nexport const registerFail = (err) => ({\n  type: actionTypes.REGISTER_FAIL,\n  payload: err,\n});\n\n// effect\n\nexport const effectGetUserInfo = () => ({\n  type: actionTypes.EFFECT_GET_USERINFO,\n});\n\nexport const effectLogin = (userInfo) => ({\n  type: actionTypes.EFFECT_LOGIN,\n  payload: userInfo,\n});\n\nexport const effectRegister = (userInfo) => ({\n  type: actionTypes.EFFECT_REGISTER,\n  payload: userInfo,\n});\n\n// export const changeCurrentPath = (path, sideEffect = null) => ({\n//   type: actionTypes.CHANGE_CURRENT_PATH,\n//   payload: path,\n//   sideEffect,\n// });\n","import * as taskActions from './tasks/actions';\n\nimport * as globalActions from './global/actions';\n\nimport * as editingTaskActions from './editingTask/actions';\n\nimport * as effectActions from './effect/actions';\n\nimport * as userActions from './user/actions';\n\nexport * from './global/actions';\n\nexport {\n  taskActions,\n  globalActions,\n  editingTaskActions,\n  userActions,\n  effectActions,\n};\n","export const EFFECT_CREATE_TASK = 'EFFECT_CREATE_TASK';\n\nexport const EFFECT_UPDATE_TASK = 'EFFECT_UPDATE_TASK';\n","// import {\n//   useRef,\n// } from 'react';\nimport {\n  useState, useEffect, useCallback, useRef,\n} from 'react';\n\n// import { store } from '../store';\n// import { createUseStore } from './helper';\n\n// export const useStore = createUseStore(store);\n\nexport function useIsOnline() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const onlineListener = useCallback(() => {\n    setIsOnline(true);\n  }, []);\n  const offlineListener = useCallback(() => {\n    setIsOnline(false);\n  }, [setIsOnline]);\n  useEffect(() => {\n    window.addEventListener('online', onlineListener);\n    window.addEventListener('offline', offlineListener);\n    return () => {\n      window.removeEventListener('online', onlineListener);\n      window.removeEventListener('offline', offlineListener);\n    };\n  }, [setIsOnline, onlineListener, offlineListener]);\n  return isOnline;\n}\n\n\nexport function useHasBeenTrued(status) {\n  const initialStausRef = useRef(status);\n  if (status) initialStausRef.current = status;\n  return initialStausRef.current;\n}\n\n// export function useIsMounted() {\n//   const [isMounted, setIsMounted] = useState(false);\n\n//   useEffect(() => {\n//     setIsMounted(true);\n//     return () => setIsMounted(false);\n//   }, [setIsMounted]);\n\n//   return isMounted;\n// }\n\nexport function useForceUpdate() {\n  const [, setUpdateCount] = useState(0);\n  const forceUpdate = useCallback(() => {\n    setUpdateCount(prevCount => prevCount + 1);\n  }, [setUpdateCount]);\n  return forceUpdate;\n}\n\nexport const foo = 'oo';\n"],"sourceRoot":""}